
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00002e5e  00002ef2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080010a  0080010a  00002f9c  2**0
                  ALLOC
  3 .stab         00002d78  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133e  00000000  00000000  00005d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007052  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007192  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000abe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000afd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b79f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ef       	ldi	r26, 0xF5	; 245
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ef       	ldi	r24, 0xF5	; 245
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 StateOfPassword;



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b5a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_init>

	UART_ConfigType uartConfig={ BITS_8,NO_PARITY,BIT_1,BAUD_RATE_9600};
     b5e:	9e 01       	movw	r18, r28
     b60:	2f 5f       	subi	r18, 0xFF	; 255
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	3b 87       	std	Y+11, r19	; 0x0b
     b66:	2a 87       	std	Y+10, r18	; 0x0a
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	9d 87       	std	Y+13, r25	; 0x0d
     b6e:	8c 87       	std	Y+12, r24	; 0x0c
     b70:	97 e0       	ldi	r25, 0x07	; 7
     b72:	9e 87       	std	Y+14, r25	; 0x0e
     b74:	ec 85       	ldd	r30, Y+12	; 0x0c
     b76:	fd 85       	ldd	r31, Y+13	; 0x0d
     b78:	00 80       	ld	r0, Z
     b7a:	2c 85       	ldd	r18, Y+12	; 0x0c
     b7c:	3d 85       	ldd	r19, Y+13	; 0x0d
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	3d 87       	std	Y+13, r19	; 0x0d
     b84:	2c 87       	std	Y+12, r18	; 0x0c
     b86:	ea 85       	ldd	r30, Y+10	; 0x0a
     b88:	fb 85       	ldd	r31, Y+11	; 0x0b
     b8a:	00 82       	st	Z, r0
     b8c:	2a 85       	ldd	r18, Y+10	; 0x0a
     b8e:	3b 85       	ldd	r19, Y+11	; 0x0b
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	3b 87       	std	Y+11, r19	; 0x0b
     b96:	2a 87       	std	Y+10, r18	; 0x0a
     b98:	3e 85       	ldd	r19, Y+14	; 0x0e
     b9a:	31 50       	subi	r19, 0x01	; 1
     b9c:	3e 87       	std	Y+14, r19	; 0x0e
     b9e:	8e 85       	ldd	r24, Y+14	; 0x0e
     ba0:	88 23       	and	r24, r24
     ba2:	41 f7       	brne	.-48     	; 0xb74 <main+0x2e>
	UART_init(&uartConfig);
     ba4:	ce 01       	movw	r24, r28
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	0e 94 6d 15 	call	0x2ada	; 0x2ada <UART_init>
	sei();
     bac:	78 94       	sei
	LCD_displayStringRowColumn(0, 0, "Plz Enter pass:");

	StateOfPassword =  UART_recieveByte();
	if(StateOfPassword!=PasswordSET)
	{} */
		Password_savePassword();
     bae:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <Password_savePassword>


	while(1)
	{
		do{
		g_keyPressed=menu();
     bb2:	0e 94 10 08 	call	0x1020	; 0x1020 <menu>
     bb6:	80 93 10 01 	sts	0x0110, r24
		}while(g_keyPressed != '-' && g_keyPressed!= '+');
     bba:	80 91 10 01 	lds	r24, 0x0110
     bbe:	8d 32       	cpi	r24, 0x2D	; 45
     bc0:	21 f0       	breq	.+8      	; 0xbca <main+0x84>
     bc2:	80 91 10 01 	lds	r24, 0x0110
     bc6:	8b 32       	cpi	r24, 0x2B	; 43
     bc8:	a1 f7       	brne	.-24     	; 0xbb2 <main+0x6c>
		switch(g_keyPressed)
     bca:	80 91 10 01 	lds	r24, 0x0110
     bce:	e8 2f       	mov	r30, r24
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	f9 87       	std	Y+9, r31	; 0x09
     bd4:	e8 87       	std	Y+8, r30	; 0x08
     bd6:	28 85       	ldd	r18, Y+8	; 0x08
     bd8:	39 85       	ldd	r19, Y+9	; 0x09
     bda:	2b 32       	cpi	r18, 0x2B	; 43
     bdc:	31 05       	cpc	r19, r1
     bde:	31 f0       	breq	.+12     	; 0xbec <main+0xa6>
     be0:	88 85       	ldd	r24, Y+8	; 0x08
     be2:	99 85       	ldd	r25, Y+9	; 0x09
     be4:	8d 32       	cpi	r24, 0x2D	; 45
     be6:	91 05       	cpc	r25, r1
     be8:	21 f0       	breq	.+8      	; 0xbf2 <main+0xac>
     bea:	e3 cf       	rjmp	.-58     	; 0xbb2 <main+0x6c>
		{
		case'+':
			Door();
     bec:	0e 94 c8 0a 	call	0x1590	; 0x1590 <Door>
     bf0:	e0 cf       	rjmp	.-64     	; 0xbb2 <main+0x6c>
		break;
		case'-':
			PASSWORD_changePassword();
     bf2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <PASSWORD_changePassword>
     bf6:	dd cf       	rjmp	.-70     	; 0xbb2 <main+0x6c>

00000bf8 <Password_savePassword>:
uint8 g_ticks = 0; /* Variable to store number of seconds */
uint8 g_keyPressed;


void Password_savePassword(void)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	ae 97       	sbiw	r28, 0x2e	; 46
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
	uint8 key2,key;
	LCD_clearScreen();
     c0c:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>
	do
	{
		g_matchedflag= 0;
     c10:	10 92 0a 01 	sts	0x010A, r1

		LCD_displayStringRowColumn(0, 0, "Plz Enter pass:");
     c14:	20 e6       	ldi	r18, 0x60	; 96
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	a9 01       	movw	r20, r18
     c1e:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_moveCursor>
     c2a:	9b c0       	rjmp	.+310    	; 0xd62 <Password_savePassword+0x16a>
		while(KEYPAD_getPressedKey() != ENTER_KEY){
			for(uint8 i = 0 ; i < 5 ; i++)
     c2c:	1c a6       	std	Y+44, r1	; 0x2c
     c2e:	95 c0       	rjmp	.+298    	; 0xd5a <Password_savePassword+0x162>
			{
				key = KEYPAD_getPressedKey();
     c30:	0e 94 57 0e 	call	0x1cae	; 0x1cae <KEYPAD_getPressedKey>
     c34:	8d a7       	std	Y+45, r24	; 0x2d
				if(key <= 9 && key >= 0)
     c36:	8d a5       	ldd	r24, Y+45	; 0x2d
     c38:	8a 30       	cpi	r24, 0x0A	; 10
     c3a:	b8 f4       	brcc	.+46     	; 0xc6a <Password_savePassword+0x72>
				{
					Password1=Password1*10+key;
     c3c:	80 91 11 01 	lds	r24, 0x0111
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9c 01       	movw	r18, r24
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	c9 01       	movw	r24, r18
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	98 2f       	mov	r25, r24
     c5a:	8d a5       	ldd	r24, Y+45	; 0x2d
     c5c:	89 0f       	add	r24, r25
     c5e:	80 93 11 01 	sts	0x0111, r24
					LCD_displayCharacter('*');
     c62:	8a e2       	ldi	r24, 0x2A	; 42
     c64:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_displayCharacter>
     c68:	03 c0       	rjmp	.+6      	; 0xc70 <Password_savePassword+0x78>
				}
				else
				{
					i--;
     c6a:	8c a5       	ldd	r24, Y+44	; 0x2c
     c6c:	81 50       	subi	r24, 0x01	; 1
     c6e:	8c a7       	std	Y+44, r24	; 0x2c
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	aa ef       	ldi	r26, 0xFA	; 250
     c76:	b3 e4       	ldi	r27, 0x43	; 67
     c78:	8f a3       	std	Y+39, r24	; 0x27
     c7a:	98 a7       	std	Y+40, r25	; 0x28
     c7c:	a9 a7       	std	Y+41, r26	; 0x29
     c7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c80:	6f a1       	ldd	r22, Y+39	; 0x27
     c82:	78 a5       	ldd	r23, Y+40	; 0x28
     c84:	89 a5       	ldd	r24, Y+41	; 0x29
     c86:	9a a5       	ldd	r25, Y+42	; 0x2a
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	4a e7       	ldi	r20, 0x7A	; 122
     c8e:	53 e4       	ldi	r21, 0x43	; 67
     c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	8b a3       	std	Y+35, r24	; 0x23
     c9a:	9c a3       	std	Y+36, r25	; 0x24
     c9c:	ad a3       	std	Y+37, r26	; 0x25
     c9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ca0:	6b a1       	ldd	r22, Y+35	; 0x23
     ca2:	7c a1       	ldd	r23, Y+36	; 0x24
     ca4:	8d a1       	ldd	r24, Y+37	; 0x25
     ca6:	9e a1       	ldd	r25, Y+38	; 0x26
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	40 e8       	ldi	r20, 0x80	; 128
     cae:	5f e3       	ldi	r21, 0x3F	; 63
     cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb4:	88 23       	and	r24, r24
     cb6:	2c f4       	brge	.+10     	; 0xcc2 <Password_savePassword+0xca>
		__ticks = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9a a3       	std	Y+34, r25	; 0x22
     cbe:	89 a3       	std	Y+33, r24	; 0x21
     cc0:	3f c0       	rjmp	.+126    	; 0xd40 <Password_savePassword+0x148>
	else if (__tmp > 65535)
     cc2:	6b a1       	ldd	r22, Y+35	; 0x23
     cc4:	7c a1       	ldd	r23, Y+36	; 0x24
     cc6:	8d a1       	ldd	r24, Y+37	; 0x25
     cc8:	9e a1       	ldd	r25, Y+38	; 0x26
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	3f ef       	ldi	r19, 0xFF	; 255
     cce:	4f e7       	ldi	r20, 0x7F	; 127
     cd0:	57 e4       	ldi	r21, 0x47	; 71
     cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd6:	18 16       	cp	r1, r24
     cd8:	4c f5       	brge	.+82     	; 0xd2c <Password_savePassword+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cda:	6f a1       	ldd	r22, Y+39	; 0x27
     cdc:	78 a5       	ldd	r23, Y+40	; 0x28
     cde:	89 a5       	ldd	r24, Y+41	; 0x29
     ce0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e2       	ldi	r20, 0x20	; 32
     ce8:	51 e4       	ldi	r21, 0x41	; 65
     cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	bc 01       	movw	r22, r24
     cf4:	cd 01       	movw	r24, r26
     cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	9a a3       	std	Y+34, r25	; 0x22
     d00:	89 a3       	std	Y+33, r24	; 0x21
     d02:	0f c0       	rjmp	.+30     	; 0xd22 <Password_savePassword+0x12a>
     d04:	89 e1       	ldi	r24, 0x19	; 25
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	98 a3       	std	Y+32, r25	; 0x20
     d0a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d0e:	98 a1       	ldd	r25, Y+32	; 0x20
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <Password_savePassword+0x118>
     d14:	98 a3       	std	Y+32, r25	; 0x20
     d16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d18:	89 a1       	ldd	r24, Y+33	; 0x21
     d1a:	9a a1       	ldd	r25, Y+34	; 0x22
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	9a a3       	std	Y+34, r25	; 0x22
     d20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d22:	89 a1       	ldd	r24, Y+33	; 0x21
     d24:	9a a1       	ldd	r25, Y+34	; 0x22
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	69 f7       	brne	.-38     	; 0xd04 <Password_savePassword+0x10c>
     d2a:	14 c0       	rjmp	.+40     	; 0xd54 <Password_savePassword+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d2c:	6b a1       	ldd	r22, Y+35	; 0x23
     d2e:	7c a1       	ldd	r23, Y+36	; 0x24
     d30:	8d a1       	ldd	r24, Y+37	; 0x25
     d32:	9e a1       	ldd	r25, Y+38	; 0x26
     d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9a a3       	std	Y+34, r25	; 0x22
     d3e:	89 a3       	std	Y+33, r24	; 0x21
     d40:	89 a1       	ldd	r24, Y+33	; 0x21
     d42:	9a a1       	ldd	r25, Y+34	; 0x22
     d44:	9e 8f       	std	Y+30, r25	; 0x1e
     d46:	8d 8f       	std	Y+29, r24	; 0x1d
     d48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <Password_savePassword+0x154>
     d50:	9e 8f       	std	Y+30, r25	; 0x1e
     d52:	8d 8f       	std	Y+29, r24	; 0x1d
		g_matchedflag= 0;

		LCD_displayStringRowColumn(0, 0, "Plz Enter pass:");
		LCD_moveCursor(1, 0);
		while(KEYPAD_getPressedKey() != ENTER_KEY){
			for(uint8 i = 0 ; i < 5 ; i++)
     d54:	8c a5       	ldd	r24, Y+44	; 0x2c
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	8c a7       	std	Y+44, r24	; 0x2c
     d5a:	8c a5       	ldd	r24, Y+44	; 0x2c
     d5c:	85 30       	cpi	r24, 0x05	; 5
     d5e:	08 f4       	brcc	.+2      	; 0xd62 <Password_savePassword+0x16a>
     d60:	67 cf       	rjmp	.-306    	; 0xc30 <Password_savePassword+0x38>
	{
		g_matchedflag= 0;

		LCD_displayStringRowColumn(0, 0, "Plz Enter pass:");
		LCD_moveCursor(1, 0);
		while(KEYPAD_getPressedKey() != ENTER_KEY){
     d62:	0e 94 57 0e 	call	0x1cae	; 0x1cae <KEYPAD_getPressedKey>
     d66:	8d 30       	cpi	r24, 0x0D	; 13
     d68:	09 f0       	breq	.+2      	; 0xd6c <Password_savePassword+0x174>
     d6a:	60 cf       	rjmp	.-320    	; 0xc2c <Password_savePassword+0x34>
				_delay_ms(500);
			}
		}


		LCD_clearScreen();
     d6c:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0," Re-Enter pass:");
     d70:	20 e7       	ldi	r18, 0x70	; 112
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	a9 01       	movw	r20, r18
     d7a:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_moveCursor>
     d86:	9b c0       	rjmp	.+310    	; 0xebe <Password_savePassword+0x2c6>
		while(KEYPAD_getPressedKey() != ENTER_KEY){
			for(uint8 i = 0 ; i < 5 ; i++)
     d88:	1b a6       	std	Y+43, r1	; 0x2b
     d8a:	95 c0       	rjmp	.+298    	; 0xeb6 <Password_savePassword+0x2be>
			{
				key2 = KEYPAD_getPressedKey();
     d8c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <KEYPAD_getPressedKey>
     d90:	8e a7       	std	Y+46, r24	; 0x2e
				if(key2 <= 9 && key2 >= 0)
     d92:	8e a5       	ldd	r24, Y+46	; 0x2e
     d94:	8a 30       	cpi	r24, 0x0A	; 10
     d96:	b8 f4       	brcc	.+46     	; 0xdc6 <Password_savePassword+0x1ce>
				{
					Password2=Password2*10+key2;
     d98:	80 91 12 01 	lds	r24, 0x0112
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9c 01       	movw	r18, r24
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	c9 01       	movw	r24, r18
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	82 0f       	add	r24, r18
     db2:	93 1f       	adc	r25, r19
     db4:	98 2f       	mov	r25, r24
     db6:	8e a5       	ldd	r24, Y+46	; 0x2e
     db8:	89 0f       	add	r24, r25
     dba:	80 93 12 01 	sts	0x0112, r24
					LCD_displayCharacter('*');
     dbe:	8a e2       	ldi	r24, 0x2A	; 42
     dc0:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_displayCharacter>
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <Password_savePassword+0x1d4>
				}
				else
				{
					i--;
     dc6:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc8:	81 50       	subi	r24, 0x01	; 1
     dca:	8b a7       	std	Y+43, r24	; 0x2b
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	aa ef       	ldi	r26, 0xFA	; 250
     dd2:	b3 e4       	ldi	r27, 0x43	; 67
     dd4:	89 8f       	std	Y+25, r24	; 0x19
     dd6:	9a 8f       	std	Y+26, r25	; 0x1a
     dd8:	ab 8f       	std	Y+27, r26	; 0x1b
     dda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ddc:	69 8d       	ldd	r22, Y+25	; 0x19
     dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4a e7       	ldi	r20, 0x7A	; 122
     dea:	53 e4       	ldi	r21, 0x43	; 67
     dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	8d 8b       	std	Y+21, r24	; 0x15
     df6:	9e 8b       	std	Y+22, r25	; 0x16
     df8:	af 8b       	std	Y+23, r26	; 0x17
     dfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dfc:	6d 89       	ldd	r22, Y+21	; 0x15
     dfe:	7e 89       	ldd	r23, Y+22	; 0x16
     e00:	8f 89       	ldd	r24, Y+23	; 0x17
     e02:	98 8d       	ldd	r25, Y+24	; 0x18
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e10:	88 23       	and	r24, r24
     e12:	2c f4       	brge	.+10     	; 0xe1e <Password_savePassword+0x226>
		__ticks = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9c 8b       	std	Y+20, r25	; 0x14
     e1a:	8b 8b       	std	Y+19, r24	; 0x13
     e1c:	3f c0       	rjmp	.+126    	; 0xe9c <Password_savePassword+0x2a4>
	else if (__tmp > 65535)
     e1e:	6d 89       	ldd	r22, Y+21	; 0x15
     e20:	7e 89       	ldd	r23, Y+22	; 0x16
     e22:	8f 89       	ldd	r24, Y+23	; 0x17
     e24:	98 8d       	ldd	r25, Y+24	; 0x18
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	3f ef       	ldi	r19, 0xFF	; 255
     e2a:	4f e7       	ldi	r20, 0x7F	; 127
     e2c:	57 e4       	ldi	r21, 0x47	; 71
     e2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e32:	18 16       	cp	r1, r24
     e34:	4c f5       	brge	.+82     	; 0xe88 <Password_savePassword+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e36:	69 8d       	ldd	r22, Y+25	; 0x19
     e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e2       	ldi	r20, 0x20	; 32
     e44:	51 e4       	ldi	r21, 0x41	; 65
     e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9c 8b       	std	Y+20, r25	; 0x14
     e5c:	8b 8b       	std	Y+19, r24	; 0x13
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <Password_savePassword+0x286>
     e60:	89 e1       	ldi	r24, 0x19	; 25
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9a 8b       	std	Y+18, r25	; 0x12
     e66:	89 8b       	std	Y+17, r24	; 0x11
     e68:	89 89       	ldd	r24, Y+17	; 0x11
     e6a:	9a 89       	ldd	r25, Y+18	; 0x12
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <Password_savePassword+0x274>
     e70:	9a 8b       	std	Y+18, r25	; 0x12
     e72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e74:	8b 89       	ldd	r24, Y+19	; 0x13
     e76:	9c 89       	ldd	r25, Y+20	; 0x14
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	9c 8b       	std	Y+20, r25	; 0x14
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7e:	8b 89       	ldd	r24, Y+19	; 0x13
     e80:	9c 89       	ldd	r25, Y+20	; 0x14
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	69 f7       	brne	.-38     	; 0xe60 <Password_savePassword+0x268>
     e86:	14 c0       	rjmp	.+40     	; 0xeb0 <Password_savePassword+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e88:	6d 89       	ldd	r22, Y+21	; 0x15
     e8a:	7e 89       	ldd	r23, Y+22	; 0x16
     e8c:	8f 89       	ldd	r24, Y+23	; 0x17
     e8e:	98 8d       	ldd	r25, Y+24	; 0x18
     e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	9c 8b       	std	Y+20, r25	; 0x14
     e9a:	8b 8b       	std	Y+19, r24	; 0x13
     e9c:	8b 89       	ldd	r24, Y+19	; 0x13
     e9e:	9c 89       	ldd	r25, Y+20	; 0x14
     ea0:	98 8b       	std	Y+16, r25	; 0x10
     ea2:	8f 87       	std	Y+15, r24	; 0x0f
     ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea6:	98 89       	ldd	r25, Y+16	; 0x10
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <Password_savePassword+0x2b0>
     eac:	98 8b       	std	Y+16, r25	; 0x10
     eae:	8f 87       	std	Y+15, r24	; 0x0f

		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0," Re-Enter pass:");
		LCD_moveCursor(1, 0);
		while(KEYPAD_getPressedKey() != ENTER_KEY){
			for(uint8 i = 0 ; i < 5 ; i++)
     eb0:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	8b a7       	std	Y+43, r24	; 0x2b
     eb6:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb8:	85 30       	cpi	r24, 0x05	; 5
     eba:	08 f4       	brcc	.+2      	; 0xebe <Password_savePassword+0x2c6>
     ebc:	67 cf       	rjmp	.-306    	; 0xd8c <Password_savePassword+0x194>


		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0," Re-Enter pass:");
		LCD_moveCursor(1, 0);
		while(KEYPAD_getPressedKey() != ENTER_KEY){
     ebe:	0e 94 57 0e 	call	0x1cae	; 0x1cae <KEYPAD_getPressedKey>
     ec2:	8d 30       	cpi	r24, 0x0D	; 13
     ec4:	09 f0       	breq	.+2      	; 0xec8 <Password_savePassword+0x2d0>
     ec6:	60 cf       	rjmp	.-320    	; 0xd88 <Password_savePassword+0x190>

				}
				_delay_ms(500);
			}
		}
		LCD_clearScreen();
     ec8:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>

		if(Password1 == Password2)
     ecc:	90 91 11 01 	lds	r25, 0x0111
     ed0:	80 91 12 01 	lds	r24, 0x0112
     ed4:	98 17       	cp	r25, r24
     ed6:	d9 f4       	brne	.+54     	; 0xf0e <Password_savePassword+0x316>
		{
			g_matchedflag= 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 0a 01 	sts	0x010A, r24
			LCD_displayStringRowColumn(0, 4, "Matched");
     ede:	20 e8       	ldi	r18, 0x80	; 128
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	64 e0       	ldi	r22, 0x04	; 4
     ee6:	a9 01       	movw	r20, r18
     ee8:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
			UART_sendByte(PASSWORDUPDATE);
     eec:	84 e0       	ldi	r24, 0x04	; 4
     eee:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>
			UART_sendByte(Password1);
     ef2:	80 91 11 01 	lds	r24, 0x0111
     ef6:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>
			UART_sendByte((uint8)(Password1>>8));
     efa:	80 91 11 01 	lds	r24, 0x0111
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	89 2f       	mov	r24, r25
     f04:	99 0f       	add	r25, r25
     f06:	99 0b       	sbc	r25, r25
     f08:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>
     f0c:	07 c0       	rjmp	.+14     	; 0xf1c <Password_savePassword+0x324>

		}

		else
		{
			LCD_displayStringRowColumn(0, 0, "UnMatched");
     f0e:	28 e8       	ldi	r18, 0x88	; 136
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	a9 01       	movw	r20, r18
     f18:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	aa e7       	ldi	r26, 0x7A	; 122
     f22:	b4 e4       	ldi	r27, 0x44	; 68
     f24:	8b 87       	std	Y+11, r24	; 0x0b
     f26:	9c 87       	std	Y+12, r25	; 0x0c
     f28:	ad 87       	std	Y+13, r26	; 0x0d
     f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f30:	8d 85       	ldd	r24, Y+13	; 0x0d
     f32:	9e 85       	ldd	r25, Y+14	; 0x0e
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a e7       	ldi	r20, 0x7A	; 122
     f3a:	53 e4       	ldi	r21, 0x43	; 67
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8f 83       	std	Y+7, r24	; 0x07
     f46:	98 87       	std	Y+8, r25	; 0x08
     f48:	a9 87       	std	Y+9, r26	; 0x09
     f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f4c:	6f 81       	ldd	r22, Y+7	; 0x07
     f4e:	78 85       	ldd	r23, Y+8	; 0x08
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <Password_savePassword+0x376>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9e 83       	std	Y+6, r25	; 0x06
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <Password_savePassword+0x3f4>
	else if (__tmp > 65535)
     f6e:	6f 81       	ldd	r22, Y+7	; 0x07
     f70:	78 85       	ldd	r23, Y+8	; 0x08
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f82:	18 16       	cp	r1, r24
     f84:	4c f5       	brge	.+82     	; 0xfd8 <Password_savePassword+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f86:	6b 85       	ldd	r22, Y+11	; 0x0b
     f88:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9e 83       	std	Y+6, r25	; 0x06
     fac:	8d 83       	std	Y+5, r24	; 0x05
     fae:	0f c0       	rjmp	.+30     	; 0xfce <Password_savePassword+0x3d6>
     fb0:	89 e1       	ldi	r24, 0x19	; 25
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <Password_savePassword+0x3c4>
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f7       	brne	.-38     	; 0xfb0 <Password_savePassword+0x3b8>
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <Password_savePassword+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <Password_savePassword+0x400>
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01

		}

		_delay_ms(1000);
		LCD_clearScreen();
    1000:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>

	}while(g_matchedflag == 0);
    1004:	80 91 0a 01 	lds	r24, 0x010A
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <Password_savePassword+0x416>
    100c:	01 ce       	rjmp	.-1022   	; 0xc10 <Password_savePassword+0x18>
}
    100e:	ae 96       	adiw	r28, 0x2e	; 46
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <menu>:



uint8 menu(void)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	2e 97       	sbiw	r28, 0x0e	; 14
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1034:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>
	LCD_displayString("+ : OPen Door");
    1038:	82 e9       	ldi	r24, 0x92	; 146
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    1048:	80 ea       	ldi	r24, 0xA0	; 160
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <LCD_displayString>
	g_keyPressed = KEYPAD_getPressedKey();
    1050:	0e 94 57 0e 	call	0x1cae	; 0x1cae <KEYPAD_getPressedKey>
    1054:	80 93 10 01 	sts	0x0110, r24
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	aa ef       	ldi	r26, 0xFA	; 250
    105e:	b3 e4       	ldi	r27, 0x43	; 67
    1060:	8b 87       	std	Y+11, r24	; 0x0b
    1062:	9c 87       	std	Y+12, r25	; 0x0c
    1064:	ad 87       	std	Y+13, r26	; 0x0d
    1066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	6b 85       	ldd	r22, Y+11	; 0x0b
    106a:	7c 85       	ldd	r23, Y+12	; 0x0c
    106c:	8d 85       	ldd	r24, Y+13	; 0x0d
    106e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	4a e7       	ldi	r20, 0x7A	; 122
    1076:	53 e4       	ldi	r21, 0x43	; 67
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8f 83       	std	Y+7, r24	; 0x07
    1082:	98 87       	std	Y+8, r25	; 0x08
    1084:	a9 87       	std	Y+9, r26	; 0x09
    1086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <menu+0x8a>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <menu+0x108>
	else if (__tmp > 65535)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <menu+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <menu+0xea>
    10ec:	89 e1       	ldi	r24, 0x19	; 25
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <menu+0xd8>
    10fc:	9c 83       	std	Y+4, r25	; 0x04
    10fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	69 f7       	brne	.-38     	; 0x10ec <menu+0xcc>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <menu+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	6f 81       	ldd	r22, Y+7	; 0x07
    1116:	78 85       	ldd	r23, Y+8	; 0x08
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <menu+0x114>
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	//UART_sendByte(g_keyPressed);
	return g_keyPressed;
    113c:	80 91 10 01 	lds	r24, 0x0110

}
    1140:	2e 96       	adiw	r28, 0x0e	; 14
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <PASSWORD_checkPass>:


uint8 PASSWORD_checkPass(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	af 97       	sbiw	r28, 0x2f	; 47
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61

	//trials = 0;
	uint16 passwardtocheck;
	do
	{
		LCD_clearScreen();
    1166:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz Enter Pass");
    116a:	20 eb       	ldi	r18, 0xB0	; 176
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_moveCursor>


		for(uint8 i = 0 ; i < 5 ; i++)
    1180:	1c a6       	std	Y+44, r1	; 0x2c
    1182:	95 c0       	rjmp	.+298    	; 0x12ae <PASSWORD_checkPass+0x15c>
		{
			uint8 key = KEYPAD_getPressedKey();
    1184:	0e 94 57 0e 	call	0x1cae	; 0x1cae <KEYPAD_getPressedKey>
    1188:	8b a7       	std	Y+43, r24	; 0x2b
			if(key <= 9 && key >= 0)
    118a:	8b a5       	ldd	r24, Y+43	; 0x2b
    118c:	8a 30       	cpi	r24, 0x0A	; 10
    118e:	b8 f4       	brcc	.+46     	; 0x11be <PASSWORD_checkPass+0x6c>
			{
				passwardtocheck=passwardtocheck*10+key;
    1190:	8d a5       	ldd	r24, Y+45	; 0x2d
    1192:	9e a5       	ldd	r25, Y+46	; 0x2e
    1194:	9c 01       	movw	r18, r24
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	c9 01       	movw	r24, r18
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	28 0f       	add	r18, r24
    11a6:	39 1f       	adc	r19, r25
    11a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	82 0f       	add	r24, r18
    11b0:	93 1f       	adc	r25, r19
    11b2:	9e a7       	std	Y+46, r25	; 0x2e
    11b4:	8d a7       	std	Y+45, r24	; 0x2d
				LCD_displayCharacter('*');
    11b6:	8a e2       	ldi	r24, 0x2A	; 42
    11b8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_displayCharacter>
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <PASSWORD_checkPass+0x72>
			}
			else
			{
				i--;
    11be:	8c a5       	ldd	r24, Y+44	; 0x2c
    11c0:	81 50       	subi	r24, 0x01	; 1
    11c2:	8c a7       	std	Y+44, r24	; 0x2c
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	aa ef       	ldi	r26, 0xFA	; 250
    11ca:	b3 e4       	ldi	r27, 0x43	; 67
    11cc:	8f a3       	std	Y+39, r24	; 0x27
    11ce:	98 a7       	std	Y+40, r25	; 0x28
    11d0:	a9 a7       	std	Y+41, r26	; 0x29
    11d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d4:	6f a1       	ldd	r22, Y+39	; 0x27
    11d6:	78 a5       	ldd	r23, Y+40	; 0x28
    11d8:	89 a5       	ldd	r24, Y+41	; 0x29
    11da:	9a a5       	ldd	r25, Y+42	; 0x2a
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	4a e7       	ldi	r20, 0x7A	; 122
    11e2:	53 e4       	ldi	r21, 0x43	; 67
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	8b a3       	std	Y+35, r24	; 0x23
    11ee:	9c a3       	std	Y+36, r25	; 0x24
    11f0:	ad a3       	std	Y+37, r26	; 0x25
    11f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11f4:	6b a1       	ldd	r22, Y+35	; 0x23
    11f6:	7c a1       	ldd	r23, Y+36	; 0x24
    11f8:	8d a1       	ldd	r24, Y+37	; 0x25
    11fa:	9e a1       	ldd	r25, Y+38	; 0x26
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e8       	ldi	r20, 0x80	; 128
    1202:	5f e3       	ldi	r21, 0x3F	; 63
    1204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1208:	88 23       	and	r24, r24
    120a:	2c f4       	brge	.+10     	; 0x1216 <PASSWORD_checkPass+0xc4>
		__ticks = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9a a3       	std	Y+34, r25	; 0x22
    1212:	89 a3       	std	Y+33, r24	; 0x21
    1214:	3f c0       	rjmp	.+126    	; 0x1294 <PASSWORD_checkPass+0x142>
	else if (__tmp > 65535)
    1216:	6b a1       	ldd	r22, Y+35	; 0x23
    1218:	7c a1       	ldd	r23, Y+36	; 0x24
    121a:	8d a1       	ldd	r24, Y+37	; 0x25
    121c:	9e a1       	ldd	r25, Y+38	; 0x26
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	3f ef       	ldi	r19, 0xFF	; 255
    1222:	4f e7       	ldi	r20, 0x7F	; 127
    1224:	57 e4       	ldi	r21, 0x47	; 71
    1226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122a:	18 16       	cp	r1, r24
    122c:	4c f5       	brge	.+82     	; 0x1280 <PASSWORD_checkPass+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122e:	6f a1       	ldd	r22, Y+39	; 0x27
    1230:	78 a5       	ldd	r23, Y+40	; 0x28
    1232:	89 a5       	ldd	r24, Y+41	; 0x29
    1234:	9a a5       	ldd	r25, Y+42	; 0x2a
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e2       	ldi	r20, 0x20	; 32
    123c:	51 e4       	ldi	r21, 0x41	; 65
    123e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9a a3       	std	Y+34, r25	; 0x22
    1254:	89 a3       	std	Y+33, r24	; 0x21
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <PASSWORD_checkPass+0x124>
    1258:	89 e1       	ldi	r24, 0x19	; 25
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	98 a3       	std	Y+32, r25	; 0x20
    125e:	8f 8f       	std	Y+31, r24	; 0x1f
    1260:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1262:	98 a1       	ldd	r25, Y+32	; 0x20
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <PASSWORD_checkPass+0x112>
    1268:	98 a3       	std	Y+32, r25	; 0x20
    126a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126c:	89 a1       	ldd	r24, Y+33	; 0x21
    126e:	9a a1       	ldd	r25, Y+34	; 0x22
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	9a a3       	std	Y+34, r25	; 0x22
    1274:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1276:	89 a1       	ldd	r24, Y+33	; 0x21
    1278:	9a a1       	ldd	r25, Y+34	; 0x22
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	69 f7       	brne	.-38     	; 0x1258 <PASSWORD_checkPass+0x106>
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <PASSWORD_checkPass+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1280:	6b a1       	ldd	r22, Y+35	; 0x23
    1282:	7c a1       	ldd	r23, Y+36	; 0x24
    1284:	8d a1       	ldd	r24, Y+37	; 0x25
    1286:	9e a1       	ldd	r25, Y+38	; 0x26
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9a a3       	std	Y+34, r25	; 0x22
    1292:	89 a3       	std	Y+33, r24	; 0x21
    1294:	89 a1       	ldd	r24, Y+33	; 0x21
    1296:	9a a1       	ldd	r25, Y+34	; 0x22
    1298:	9e 8f       	std	Y+30, r25	; 0x1e
    129a:	8d 8f       	std	Y+29, r24	; 0x1d
    129c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    129e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <PASSWORD_checkPass+0x14e>
    12a4:	9e 8f       	std	Y+30, r25	; 0x1e
    12a6:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Plz Enter Pass");
		LCD_moveCursor(1, 0);


		for(uint8 i = 0 ; i < 5 ; i++)
    12a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	8c a7       	std	Y+44, r24	; 0x2c
    12ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    12b0:	85 30       	cpi	r24, 0x05	; 5
    12b2:	08 f4       	brcc	.+2      	; 0x12b6 <PASSWORD_checkPass+0x164>
    12b4:	67 cf       	rjmp	.-306    	; 0x1184 <PASSWORD_checkPass+0x32>
			}
			_delay_ms(500);
		}
		//while(KEYPAD_getPressedKey() != ENTER_KEY);

		UART_sendByte(CHECKPASSWORD);
    12b6:	86 e0       	ldi	r24, 0x06	; 6
    12b8:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>

		UART_sendByte((uint8)passwardtocheck);
    12bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    12be:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>
		UART_sendByte((uint8)(passwardtocheck>>8));
    12c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c6:	89 2f       	mov	r24, r25
    12c8:	99 27       	eor	r25, r25
    12ca:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>


		LCD_clearScreen();
    12ce:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>
		if(UART_recieveByte() ==  MATCHED)
    12d2:	0e 94 14 16 	call	0x2c28	; 0x2c28 <UART_recieveByte>
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <PASSWORD_checkPass+0x18a>
    12da:	7c c0       	rjmp	.+248    	; 0x13d4 <PASSWORD_checkPass+0x282>
		{
			LCD_displayStringRowColumn(0, 4, "Matched");
    12dc:	20 e8       	ldi	r18, 0x80	; 128
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	64 e0       	ldi	r22, 0x04	; 4
    12e4:	a9 01       	movw	r20, r18
    12e6:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	aa ef       	ldi	r26, 0xFA	; 250
    12f0:	b3 e4       	ldi	r27, 0x43	; 67
    12f2:	89 8f       	std	Y+25, r24	; 0x19
    12f4:	9a 8f       	std	Y+26, r25	; 0x1a
    12f6:	ab 8f       	std	Y+27, r26	; 0x1b
    12f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	69 8d       	ldd	r22, Y+25	; 0x19
    12fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a e7       	ldi	r20, 0x7A	; 122
    1308:	53 e4       	ldi	r21, 0x43	; 67
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8d 8b       	std	Y+21, r24	; 0x15
    1314:	9e 8b       	std	Y+22, r25	; 0x16
    1316:	af 8b       	std	Y+23, r26	; 0x17
    1318:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    131a:	6d 89       	ldd	r22, Y+21	; 0x15
    131c:	7e 89       	ldd	r23, Y+22	; 0x16
    131e:	8f 89       	ldd	r24, Y+23	; 0x17
    1320:	98 8d       	ldd	r25, Y+24	; 0x18
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	2c f4       	brge	.+10     	; 0x133c <PASSWORD_checkPass+0x1ea>
		__ticks = 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 8b       	std	Y+20, r25	; 0x14
    1338:	8b 8b       	std	Y+19, r24	; 0x13
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <PASSWORD_checkPass+0x268>
	else if (__tmp > 65535)
    133c:	6d 89       	ldd	r22, Y+21	; 0x15
    133e:	7e 89       	ldd	r23, Y+22	; 0x16
    1340:	8f 89       	ldd	r24, Y+23	; 0x17
    1342:	98 8d       	ldd	r25, Y+24	; 0x18
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	57 e4       	ldi	r21, 0x47	; 71
    134c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1350:	18 16       	cp	r1, r24
    1352:	4c f5       	brge	.+82     	; 0x13a6 <PASSWORD_checkPass+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1354:	69 8d       	ldd	r22, Y+25	; 0x19
    1356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e2       	ldi	r20, 0x20	; 32
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9c 8b       	std	Y+20, r25	; 0x14
    137a:	8b 8b       	std	Y+19, r24	; 0x13
    137c:	0f c0       	rjmp	.+30     	; 0x139c <PASSWORD_checkPass+0x24a>
    137e:	89 e1       	ldi	r24, 0x19	; 25
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9a 8b       	std	Y+18, r25	; 0x12
    1384:	89 8b       	std	Y+17, r24	; 0x11
    1386:	89 89       	ldd	r24, Y+17	; 0x11
    1388:	9a 89       	ldd	r25, Y+18	; 0x12
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <PASSWORD_checkPass+0x238>
    138e:	9a 8b       	std	Y+18, r25	; 0x12
    1390:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	8b 89       	ldd	r24, Y+19	; 0x13
    1394:	9c 89       	ldd	r25, Y+20	; 0x14
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	9c 8b       	std	Y+20, r25	; 0x14
    139a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	8b 89       	ldd	r24, Y+19	; 0x13
    139e:	9c 89       	ldd	r25, Y+20	; 0x14
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f7       	brne	.-38     	; 0x137e <PASSWORD_checkPass+0x22c>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <PASSWORD_checkPass+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a6:	6d 89       	ldd	r22, Y+21	; 0x15
    13a8:	7e 89       	ldd	r23, Y+22	; 0x16
    13aa:	8f 89       	ldd	r24, Y+23	; 0x17
    13ac:	98 8d       	ldd	r25, Y+24	; 0x18
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9c 8b       	std	Y+20, r25	; 0x14
    13b8:	8b 8b       	std	Y+19, r24	; 0x13
    13ba:	8b 89       	ldd	r24, Y+19	; 0x13
    13bc:	9c 89       	ldd	r25, Y+20	; 0x14
    13be:	98 8b       	std	Y+16, r25	; 0x10
    13c0:	8f 87       	std	Y+15, r24	; 0x0f
    13c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c4:	98 89       	ldd	r25, Y+16	; 0x10
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <PASSWORD_checkPass+0x274>
    13ca:	98 8b       	std	Y+16, r25	; 0x10
    13cc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			return MATCHED;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	8f a7       	std	Y+47, r24	; 0x2f
    13d2:	92 c0       	rjmp	.+292    	; 0x14f8 <PASSWORD_checkPass+0x3a6>
		}
		else
		{
			trials++;
    13d4:	80 91 0b 01 	lds	r24, 0x010B
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	80 93 0b 01 	sts	0x010B, r24
			LCD_displayStringRowColumn(0, 2, "UnMatched");
    13de:	28 e8       	ldi	r18, 0x88	; 136
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	62 e0       	ldi	r22, 0x02	; 2
    13e6:	a9 01       	movw	r20, r18
    13e8:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Trials = ");
    13ec:	2f eb       	ldi	r18, 0xBF	; 191
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
			LCD_intgerToString(trials);
    13fa:	80 91 0b 01 	lds	r24, 0x010B
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 64 14 	call	0x28c8	; 0x28c8 <LCD_intgerToString>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	aa ef       	ldi	r26, 0xFA	; 250
    140c:	b3 e4       	ldi	r27, 0x43	; 67
    140e:	8b 87       	std	Y+11, r24	; 0x0b
    1410:	9c 87       	std	Y+12, r25	; 0x0c
    1412:	ad 87       	std	Y+13, r26	; 0x0d
    1414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	6b 85       	ldd	r22, Y+11	; 0x0b
    1418:	7c 85       	ldd	r23, Y+12	; 0x0c
    141a:	8d 85       	ldd	r24, Y+13	; 0x0d
    141c:	9e 85       	ldd	r25, Y+14	; 0x0e
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a e7       	ldi	r20, 0x7A	; 122
    1424:	53 e4       	ldi	r21, 0x43	; 67
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8f 83       	std	Y+7, r24	; 0x07
    1430:	98 87       	std	Y+8, r25	; 0x08
    1432:	a9 87       	std	Y+9, r26	; 0x09
    1434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    144a:	88 23       	and	r24, r24
    144c:	2c f4       	brge	.+10     	; 0x1458 <PASSWORD_checkPass+0x306>
		__ticks = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <PASSWORD_checkPass+0x384>
	else if (__tmp > 65535)
    1458:	6f 81       	ldd	r22, Y+7	; 0x07
    145a:	78 85       	ldd	r23, Y+8	; 0x08
    145c:	89 85       	ldd	r24, Y+9	; 0x09
    145e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	4c f5       	brge	.+82     	; 0x14c2 <PASSWORD_checkPass+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	6b 85       	ldd	r22, Y+11	; 0x0b
    1472:	7c 85       	ldd	r23, Y+12	; 0x0c
    1474:	8d 85       	ldd	r24, Y+13	; 0x0d
    1476:	9e 85       	ldd	r25, Y+14	; 0x0e
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <PASSWORD_checkPass+0x366>
    149a:	89 e1       	ldi	r24, 0x19	; 25
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <PASSWORD_checkPass+0x354>
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f7       	brne	.-38     	; 0x149a <PASSWORD_checkPass+0x348>
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <PASSWORD_checkPass+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <PASSWORD_checkPass+0x390>
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
		}
	}while((trials<3));
    14ea:	80 91 0b 01 	lds	r24, 0x010B
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <PASSWORD_checkPass+0x3a2>
    14f2:	39 ce       	rjmp	.-910    	; 0x1166 <PASSWORD_checkPass+0x14>
	return UNMATCHED;
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	8f a7       	std	Y+47, r24	; 0x2f
    14f8:	8f a5       	ldd	r24, Y+47	; 0x2f
}
    14fa:	af 96       	adiw	r28, 0x2f	; 47
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <Alarm>:

void Alarm()
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62

	g_ticks = 0;
    1514:	10 92 0c 01 	sts	0x010C, r1
	LCD_clearScreen();
    1518:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 4, "ERROR ");
    151c:	29 ec       	ldi	r18, 0xC9	; 201
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	64 e0       	ldi	r22, 0x04	; 4
    1524:	a9 01       	movw	r20, r18
    1526:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
	UART_sendByte(ALARM);
    152a:	85 e0       	ldi	r24, 0x05	; 5
    152c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>
	Timer1_init(&timerConfig);
    1530:	8d ef       	ldi	r24, 0xFD	; 253
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Timer1_init>
	Timer1_setCallBack(TIMER_ISR);
    1538:	8d e0       	ldi	r24, 0x0D	; 13
    153a:	9b e0       	ldi	r25, 0x0B	; 11
    153c:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <Timer1_setCallBack>
	while(g_ticks != 60);
    1540:	80 91 0c 01 	lds	r24, 0x010C
    1544:	8c 33       	cpi	r24, 0x3C	; 60
    1546:	e1 f7       	brne	.-8      	; 0x1540 <Alarm+0x34>
	g_ticks = 0;
    1548:	10 92 0c 01 	sts	0x010C, r1
	Timer1_deInit();
    154c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <Timer1_deInit>
	LCD_displayStringRowColumn(0, 4, "finished ");
    1550:	20 ed       	ldi	r18, 0xD0	; 208
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	64 e0       	ldi	r22, 0x04	; 4
    1558:	a9 01       	movw	r20, r18
    155a:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
	return;

}
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <PASSWORD_changePassword>:


void PASSWORD_changePassword(void)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	0f 92       	push	r0
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	uint8 PasswordsCompare =PASSWORD_checkPass() ;
    156e:	0e 94 a9 08 	call	0x1152	; 0x1152 <PASSWORD_checkPass>
    1572:	89 83       	std	Y+1, r24	; 0x01
	if(PasswordsCompare == MATCHED)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	11 f4       	brne	.+4      	; 0x157e <PASSWORD_changePassword+0x1a>
	{
		Password_savePassword();
    157a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <Password_savePassword>
	}
	if(PasswordsCompare == UNMATCHED)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	11 f4       	brne	.+4      	; 0x1588 <PASSWORD_changePassword+0x24>
	{
		Alarm();
    1584:	0e 94 86 0a 	call	0x150c	; 0x150c <Alarm>
	}

}
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <Door>:

void Door()
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62

	uint8 Passwordtocheck ;
	Passwordtocheck=PASSWORD_checkPass();
    159a:	0e 94 a9 08 	call	0x1152	; 0x1152 <PASSWORD_checkPass>
    159e:	89 83       	std	Y+1, r24	; 0x01
	if(Passwordtocheck == MATCHED)
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	a1 f5       	brne	.+104    	; 0x160e <Door+0x7e>
	{

		g_ticks = 0;
    15a6:	10 92 0c 01 	sts	0x010C, r1
		LCD_clearScreen();
    15aa:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "DOOR UNLOCK");
    15ae:	2a ed       	ldi	r18, 0xDA	; 218
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	a9 01       	movw	r20, r18
    15b8:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
		Timer1_init(&timerConfig);
    15bc:	8d ef       	ldi	r24, 0xFD	; 253
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Timer1_init>
		Timer1_setCallBack(TIMER_ISR);
    15c4:	8d e0       	ldi	r24, 0x0D	; 13
    15c6:	9b e0       	ldi	r25, 0x0B	; 11
    15c8:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <Timer1_setCallBack>
		UART_sendByte(DOOR);
    15cc:	87 e0       	ldi	r24, 0x07	; 7
    15ce:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>
		while(g_ticks!=15);
    15d2:	80 91 0c 01 	lds	r24, 0x010C
    15d6:	8f 30       	cpi	r24, 0x0F	; 15
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <Door+0x42>
		g_ticks = 0;
    15da:	10 92 0c 01 	sts	0x010C, r1
		LCD_clearScreen();
    15de:	0e 94 87 14 	call	0x290e	; 0x290e <LCD_clearScreen>
		while(g_ticks!=3);
    15e2:	80 91 0c 01 	lds	r24, 0x010C
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	e1 f7       	brne	.-8      	; 0x15e2 <Door+0x52>
		LCD_displayStringRowColumn(0, 0, "Door Is Locked");
    15ea:	26 ee       	ldi	r18, 0xE6	; 230
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	a9 01       	movw	r20, r18
    15f4:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_displayStringRowColumn>
		g_ticks = 0;
    15f8:	10 92 0c 01 	sts	0x010C, r1
		while(g_ticks!=15);
    15fc:	80 91 0c 01 	lds	r24, 0x010C
    1600:	8f 30       	cpi	r24, 0x0F	; 15
    1602:	e1 f7       	brne	.-8      	; 0x15fc <Door+0x6c>
		g_ticks = 0;
    1604:	10 92 0c 01 	sts	0x010C, r1
		Timer1_deInit();
    1608:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <Timer1_deInit>
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <Door+0x82>


	}
	else
	{
		Alarm();
    160e:	0e 94 86 0a 	call	0x150c	; 0x150c <Alarm>
	}
}
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <TIMER_ISR>:
void TIMER_ISR()
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1622:	80 91 0c 01 	lds	r24, 0x010C
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	80 93 0c 01 	sts	0x010C, r24
}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <GPIO_setupPinDirection+0x6>
    1638:	00 d0       	rcall	.+0      	; 0x163a <GPIO_setupPinDirection+0x8>
    163a:	0f 92       	push	r0
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	6a 83       	std	Y+2, r22	; 0x02
    1644:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	88 30       	cpi	r24, 0x08	; 8
    164a:	08 f0       	brcs	.+2      	; 0x164e <GPIO_setupPinDirection+0x1c>
    164c:	d5 c0       	rjmp	.+426    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	84 30       	cpi	r24, 0x04	; 4
    1652:	08 f0       	brcs	.+2      	; 0x1656 <GPIO_setupPinDirection+0x24>
    1654:	d1 c0       	rjmp	.+418    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3d 83       	std	Y+5, r19	; 0x05
    165e:	2c 83       	std	Y+4, r18	; 0x04
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	9d 81       	ldd	r25, Y+5	; 0x05
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <GPIO_setupPinDirection+0x3a>
    166a:	43 c0       	rjmp	.+134    	; 0x16f2 <GPIO_setupPinDirection+0xc0>
    166c:	2c 81       	ldd	r18, Y+4	; 0x04
    166e:	3d 81       	ldd	r19, Y+5	; 0x05
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <GPIO_setupPinDirection+0x4e>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	71 f0       	breq	.+28     	; 0x169a <GPIO_setupPinDirection+0x68>
    167e:	bc c0       	rjmp	.+376    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
    1680:	2c 81       	ldd	r18, Y+4	; 0x04
    1682:	3d 81       	ldd	r19, Y+5	; 0x05
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <GPIO_setupPinDirection+0x5a>
    168a:	5f c0       	rjmp	.+190    	; 0x174a <GPIO_setupPinDirection+0x118>
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	9d 81       	ldd	r25, Y+5	; 0x05
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	91 05       	cpc	r25, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <GPIO_setupPinDirection+0x66>
    1696:	85 c0       	rjmp	.+266    	; 0x17a2 <GPIO_setupPinDirection+0x170>
    1698:	af c0       	rjmp	.+350    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	a1 f4       	brne	.+40     	; 0x16c8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16a0:	aa e3       	ldi	r26, 0x3A	; 58
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	ea e3       	ldi	r30, 0x3A	; 58
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <GPIO_setupPinDirection+0x8c>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <GPIO_setupPinDirection+0x88>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	98 c0       	rjmp	.+304    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16c8:	aa e3       	ldi	r26, 0x3A	; 58
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ea e3       	ldi	r30, 0x3A	; 58
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <GPIO_setupPinDirection+0xb4>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <GPIO_setupPinDirection+0xb0>
    16ea:	80 95       	com	r24
    16ec:	84 23       	and	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	83 c0       	rjmp	.+262    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	a1 f4       	brne	.+40     	; 0x1720 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16f8:	a7 e3       	ldi	r26, 0x37	; 55
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e7 e3       	ldi	r30, 0x37	; 55
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GPIO_setupPinDirection+0xe4>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <GPIO_setupPinDirection+0xe0>
    171a:	84 2b       	or	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	6c c0       	rjmp	.+216    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1720:	a7 e3       	ldi	r26, 0x37	; 55
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e7 e3       	ldi	r30, 0x37	; 55
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	48 2f       	mov	r20, r24
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 2e       	mov	r0, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GPIO_setupPinDirection+0x10c>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <GPIO_setupPinDirection+0x108>
    1742:	80 95       	com	r24
    1744:	84 23       	and	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	57 c0       	rjmp	.+174    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	a1 f4       	brne	.+40     	; 0x1778 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1750:	a4 e3       	ldi	r26, 0x34	; 52
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e4 e3       	ldi	r30, 0x34	; 52
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <GPIO_setupPinDirection+0x13c>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <GPIO_setupPinDirection+0x138>
    1772:	84 2b       	or	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	40 c0       	rjmp	.+128    	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1778:	a4 e3       	ldi	r26, 0x34	; 52
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <GPIO_setupPinDirection+0x164>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <GPIO_setupPinDirection+0x160>
    179a:	80 95       	com	r24
    179c:	84 23       	and	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	2b c0       	rjmp	.+86     	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	a1 f4       	brne	.+40     	; 0x17d0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17a8:	a1 e3       	ldi	r26, 0x31	; 49
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e1 e3       	ldi	r30, 0x31	; 49
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_setupPinDirection+0x194>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_setupPinDirection+0x190>
    17ca:	84 2b       	or	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17d0:	a1 e3       	ldi	r26, 0x31	; 49
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e1 e3       	ldi	r30, 0x31	; 49
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_setupPinDirection+0x1bc>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_setupPinDirection+0x1b8>
    17f2:	80 95       	com	r24
    17f4:	84 23       	and	r24, r20
    17f6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <GPIO_writePin+0x6>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <GPIO_writePin+0x8>
    1810:	0f 92       	push	r0
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	6a 83       	std	Y+2, r22	; 0x02
    181a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	88 30       	cpi	r24, 0x08	; 8
    1820:	08 f0       	brcs	.+2      	; 0x1824 <GPIO_writePin+0x1c>
    1822:	d5 c0       	rjmp	.+426    	; 0x19ce <GPIO_writePin+0x1c6>
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	84 30       	cpi	r24, 0x04	; 4
    1828:	08 f0       	brcs	.+2      	; 0x182c <GPIO_writePin+0x24>
    182a:	d1 c0       	rjmp	.+418    	; 0x19ce <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3d 83       	std	Y+5, r19	; 0x05
    1834:	2c 83       	std	Y+4, r18	; 0x04
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <GPIO_writePin+0x3a>
    1840:	43 c0       	rjmp	.+134    	; 0x18c8 <GPIO_writePin+0xc0>
    1842:	2c 81       	ldd	r18, Y+4	; 0x04
    1844:	3d 81       	ldd	r19, Y+5	; 0x05
    1846:	22 30       	cpi	r18, 0x02	; 2
    1848:	31 05       	cpc	r19, r1
    184a:	2c f4       	brge	.+10     	; 0x1856 <GPIO_writePin+0x4e>
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	9d 81       	ldd	r25, Y+5	; 0x05
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	71 f0       	breq	.+28     	; 0x1870 <GPIO_writePin+0x68>
    1854:	bc c0       	rjmp	.+376    	; 0x19ce <GPIO_writePin+0x1c6>
    1856:	2c 81       	ldd	r18, Y+4	; 0x04
    1858:	3d 81       	ldd	r19, Y+5	; 0x05
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <GPIO_writePin+0x5a>
    1860:	5f c0       	rjmp	.+190    	; 0x1920 <GPIO_writePin+0x118>
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	9d 81       	ldd	r25, Y+5	; 0x05
    1866:	83 30       	cpi	r24, 0x03	; 3
    1868:	91 05       	cpc	r25, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <GPIO_writePin+0x66>
    186c:	85 c0       	rjmp	.+266    	; 0x1978 <GPIO_writePin+0x170>
    186e:	af c0       	rjmp	.+350    	; 0x19ce <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	a1 f4       	brne	.+40     	; 0x189e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1876:	ab e3       	ldi	r26, 0x3B	; 59
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e3       	ldi	r30, 0x3B	; 59
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <GPIO_writePin+0x8c>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <GPIO_writePin+0x88>
    1898:	84 2b       	or	r24, r20
    189a:	8c 93       	st	X, r24
    189c:	98 c0       	rjmp	.+304    	; 0x19ce <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    189e:	ab e3       	ldi	r26, 0x3B	; 59
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	eb e3       	ldi	r30, 0x3B	; 59
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 2e       	mov	r0, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <GPIO_writePin+0xb4>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	0a 94       	dec	r0
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <GPIO_writePin+0xb0>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	83 c0       	rjmp	.+262    	; 0x19ce <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	a1 f4       	brne	.+40     	; 0x18f6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18ce:	a8 e3       	ldi	r26, 0x38	; 56
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e8 e3       	ldi	r30, 0x38	; 56
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_writePin+0xe4>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_writePin+0xe0>
    18f0:	84 2b       	or	r24, r20
    18f2:	8c 93       	st	X, r24
    18f4:	6c c0       	rjmp	.+216    	; 0x19ce <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18f6:	a8 e3       	ldi	r26, 0x38	; 56
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e8 e3       	ldi	r30, 0x38	; 56
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <GPIO_writePin+0x10c>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <GPIO_writePin+0x108>
    1918:	80 95       	com	r24
    191a:	84 23       	and	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	57 c0       	rjmp	.+174    	; 0x19ce <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	a1 f4       	brne	.+40     	; 0x194e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1926:	a5 e3       	ldi	r26, 0x35	; 53
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e5 e3       	ldi	r30, 0x35	; 53
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <GPIO_writePin+0x13c>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <GPIO_writePin+0x138>
    1948:	84 2b       	or	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	40 c0       	rjmp	.+128    	; 0x19ce <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    194e:	a5 e3       	ldi	r26, 0x35	; 53
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e5 e3       	ldi	r30, 0x35	; 53
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <GPIO_writePin+0x164>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <GPIO_writePin+0x160>
    1970:	80 95       	com	r24
    1972:	84 23       	and	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	2b c0       	rjmp	.+86     	; 0x19ce <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	a1 f4       	brne	.+40     	; 0x19a6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    197e:	a2 e3       	ldi	r26, 0x32	; 50
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e2 e3       	ldi	r30, 0x32	; 50
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <GPIO_writePin+0x194>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <GPIO_writePin+0x190>
    19a0:	84 2b       	or	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19a6:	a2 e3       	ldi	r26, 0x32	; 50
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e2 e3       	ldi	r30, 0x32	; 50
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <GPIO_writePin+0x1bc>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <GPIO_writePin+0x1b8>
    19c8:	80 95       	com	r24
    19ca:	84 23       	and	r24, r20
    19cc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <GPIO_readPin+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <GPIO_readPin+0x8>
    19e6:	0f 92       	push	r0
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	8a 83       	std	Y+2, r24	; 0x02
    19ee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19f0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	88 30       	cpi	r24, 0x08	; 8
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <GPIO_readPin+0x1c>
    19f8:	84 c0       	rjmp	.+264    	; 0x1b02 <GPIO_readPin+0x124>
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <GPIO_readPin+0x24>
    1a00:	80 c0       	rjmp	.+256    	; 0x1b02 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	3d 83       	std	Y+5, r19	; 0x05
    1a0a:	2c 83       	std	Y+4, r18	; 0x04
    1a0c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a0e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a10:	41 30       	cpi	r20, 0x01	; 1
    1a12:	51 05       	cpc	r21, r1
    1a14:	79 f1       	breq	.+94     	; 0x1a74 <GPIO_readPin+0x96>
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	82 30       	cpi	r24, 0x02	; 2
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	34 f4       	brge	.+12     	; 0x1a2c <GPIO_readPin+0x4e>
    1a20:	2c 81       	ldd	r18, Y+4	; 0x04
    1a22:	3d 81       	ldd	r19, Y+5	; 0x05
    1a24:	21 15       	cp	r18, r1
    1a26:	31 05       	cpc	r19, r1
    1a28:	69 f0       	breq	.+26     	; 0x1a44 <GPIO_readPin+0x66>
    1a2a:	6b c0       	rjmp	.+214    	; 0x1b02 <GPIO_readPin+0x124>
    1a2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a2e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a30:	42 30       	cpi	r20, 0x02	; 2
    1a32:	51 05       	cpc	r21, r1
    1a34:	b9 f1       	breq	.+110    	; 0x1aa4 <GPIO_readPin+0xc6>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <GPIO_readPin+0x64>
    1a40:	49 c0       	rjmp	.+146    	; 0x1ad4 <GPIO_readPin+0xf6>
    1a42:	5f c0       	rjmp	.+190    	; 0x1b02 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a44:	e9 e3       	ldi	r30, 0x39	; 57
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a9 01       	movw	r20, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <GPIO_readPin+0x7e>
    1a58:	55 95       	asr	r21
    1a5a:	47 95       	ror	r20
    1a5c:	8a 95       	dec	r24
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <GPIO_readPin+0x7a>
    1a60:	ca 01       	movw	r24, r20
    1a62:	81 70       	andi	r24, 0x01	; 1
    1a64:	90 70       	andi	r25, 0x00	; 0
    1a66:	88 23       	and	r24, r24
    1a68:	19 f0       	breq	.+6      	; 0x1a70 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	49 c0       	rjmp	.+146    	; 0x1b02 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a70:	19 82       	std	Y+1, r1	; 0x01
    1a72:	47 c0       	rjmp	.+142    	; 0x1b02 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a74:	e6 e3       	ldi	r30, 0x36	; 54
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a9 01       	movw	r20, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <GPIO_readPin+0xae>
    1a88:	55 95       	asr	r21
    1a8a:	47 95       	ror	r20
    1a8c:	8a 95       	dec	r24
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <GPIO_readPin+0xaa>
    1a90:	ca 01       	movw	r24, r20
    1a92:	81 70       	andi	r24, 0x01	; 1
    1a94:	90 70       	andi	r25, 0x00	; 0
    1a96:	88 23       	and	r24, r24
    1a98:	19 f0       	breq	.+6      	; 0x1aa0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	31 c0       	rjmp	.+98     	; 0x1b02 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aa0:	19 82       	std	Y+1, r1	; 0x01
    1aa2:	2f c0       	rjmp	.+94     	; 0x1b02 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1aa4:	e3 e3       	ldi	r30, 0x33	; 51
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <GPIO_readPin+0xde>
    1ab8:	55 95       	asr	r21
    1aba:	47 95       	ror	r20
    1abc:	8a 95       	dec	r24
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <GPIO_readPin+0xda>
    1ac0:	ca 01       	movw	r24, r20
    1ac2:	81 70       	andi	r24, 0x01	; 1
    1ac4:	90 70       	andi	r25, 0x00	; 0
    1ac6:	88 23       	and	r24, r24
    1ac8:	19 f0       	breq	.+6      	; 0x1ad0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	19 c0       	rjmp	.+50     	; 0x1b02 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ad0:	19 82       	std	Y+1, r1	; 0x01
    1ad2:	17 c0       	rjmp	.+46     	; 0x1b02 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ad4:	e0 e3       	ldi	r30, 0x30	; 48
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <GPIO_readPin+0x10e>
    1ae8:	55 95       	asr	r21
    1aea:	47 95       	ror	r20
    1aec:	8a 95       	dec	r24
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <GPIO_readPin+0x10a>
    1af0:	ca 01       	movw	r24, r20
    1af2:	81 70       	andi	r24, 0x01	; 1
    1af4:	90 70       	andi	r25, 0x00	; 0
    1af6:	88 23       	and	r24, r24
    1af8:	19 f0       	breq	.+6      	; 0x1b00 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b00:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <GPIO_setupPortDirection+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <GPIO_setupPortDirection+0x8>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	84 30       	cpi	r24, 0x04	; 4
    1b28:	90 f5       	brcc	.+100    	; 0x1b8e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	3c 83       	std	Y+4, r19	; 0x04
    1b32:	2b 83       	std	Y+3, r18	; 0x03
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	d1 f0       	breq	.+52     	; 0x1b72 <GPIO_setupPortDirection+0x5e>
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	3c 81       	ldd	r19, Y+4	; 0x04
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	31 05       	cpc	r19, r1
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <GPIO_setupPortDirection+0x3e>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	61 f0       	breq	.+24     	; 0x1b68 <GPIO_setupPortDirection+0x54>
    1b50:	1e c0       	rjmp	.+60     	; 0x1b8e <GPIO_setupPortDirection+0x7a>
    1b52:	2b 81       	ldd	r18, Y+3	; 0x03
    1b54:	3c 81       	ldd	r19, Y+4	; 0x04
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	81 f0       	breq	.+32     	; 0x1b7c <GPIO_setupPortDirection+0x68>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	83 30       	cpi	r24, 0x03	; 3
    1b62:	91 05       	cpc	r25, r1
    1b64:	81 f0       	breq	.+32     	; 0x1b86 <GPIO_setupPortDirection+0x72>
    1b66:	13 c0       	rjmp	.+38     	; 0x1b8e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b68:	ea e3       	ldi	r30, 0x3A	; 58
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	80 83       	st	Z, r24
    1b70:	0e c0       	rjmp	.+28     	; 0x1b8e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b72:	e7 e3       	ldi	r30, 0x37	; 55
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	80 83       	st	Z, r24
    1b7a:	09 c0       	rjmp	.+18     	; 0x1b8e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b7c:	e4 e3       	ldi	r30, 0x34	; 52
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	80 83       	st	Z, r24
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b86:	e1 e3       	ldi	r30, 0x31	; 49
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <GPIO_writePort+0x6>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <GPIO_writePort+0x8>
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	90 f5       	brcc	.+100    	; 0x1c16 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	3c 83       	std	Y+4, r19	; 0x04
    1bba:	2b 83       	std	Y+3, r18	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	d1 f0       	breq	.+52     	; 0x1bfa <GPIO_writePort+0x5e>
    1bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	2c f4       	brge	.+10     	; 0x1bda <GPIO_writePort+0x3e>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	61 f0       	breq	.+24     	; 0x1bf0 <GPIO_writePort+0x54>
    1bd8:	1e c0       	rjmp	.+60     	; 0x1c16 <GPIO_writePort+0x7a>
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	81 f0       	breq	.+32     	; 0x1c04 <GPIO_writePort+0x68>
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	81 f0       	breq	.+32     	; 0x1c0e <GPIO_writePort+0x72>
    1bee:	13 c0       	rjmp	.+38     	; 0x1c16 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bf0:	eb e3       	ldi	r30, 0x3B	; 59
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	80 83       	st	Z, r24
    1bf8:	0e c0       	rjmp	.+28     	; 0x1c16 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bfa:	e8 e3       	ldi	r30, 0x38	; 56
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	80 83       	st	Z, r24
    1c02:	09 c0       	rjmp	.+18     	; 0x1c16 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c04:	e5 e3       	ldi	r30, 0x35	; 53
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	80 83       	st	Z, r24
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c0e:	e2 e3       	ldi	r30, 0x32	; 50
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <GPIO_readPort+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <GPIO_readPort+0x8>
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c32:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	84 30       	cpi	r24, 0x04	; 4
    1c38:	90 f5       	brcc	.+100    	; 0x1c9e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	3c 83       	std	Y+4, r19	; 0x04
    1c42:	2b 83       	std	Y+3, r18	; 0x03
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	d1 f0       	breq	.+52     	; 0x1c82 <GPIO_readPort+0x5e>
    1c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c50:	3c 81       	ldd	r19, Y+4	; 0x04
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <GPIO_readPort+0x3e>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	61 f0       	breq	.+24     	; 0x1c78 <GPIO_readPort+0x54>
    1c60:	1e c0       	rjmp	.+60     	; 0x1c9e <GPIO_readPort+0x7a>
    1c62:	2b 81       	ldd	r18, Y+3	; 0x03
    1c64:	3c 81       	ldd	r19, Y+4	; 0x04
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	81 f0       	breq	.+32     	; 0x1c8c <GPIO_readPort+0x68>
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	83 30       	cpi	r24, 0x03	; 3
    1c72:	91 05       	cpc	r25, r1
    1c74:	81 f0       	breq	.+32     	; 0x1c96 <GPIO_readPort+0x72>
    1c76:	13 c0       	rjmp	.+38     	; 0x1c9e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c78:	e9 e3       	ldi	r30, 0x39	; 57
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	0e c0       	rjmp	.+28     	; 0x1c9e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c82:	e6 e3       	ldi	r30, 0x36	; 54
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c8c:	e3 e3       	ldi	r30, 0x33	; 51
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	04 c0       	rjmp	.+8      	; 0x1c9e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c96:	e0 e3       	ldi	r30, 0x30	; 48
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <KEYPAD_getPressedKey+0x6>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	62 e0       	ldi	r22, 0x02	; 2
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	63 e0       	ldi	r22, 0x03	; 3
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	64 e0       	ldi	r22, 0x04	; 4
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	65 e0       	ldi	r22, 0x05	; 5
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	66 e0       	ldi	r22, 0x06	; 6
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	67 e0       	ldi	r22, 0x07	; 7
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d08:	19 82       	std	Y+1, r1	; 0x01
    1d0a:	35 c0       	rjmp	.+106    	; 0x1d76 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	69 81       	ldd	r22, Y+1	; 0x01
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	69 81       	ldd	r22, Y+1	; 0x01
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d20:	1a 82       	std	Y+2, r1	; 0x02
    1d22:	1e c0       	rjmp	.+60     	; 0x1d60 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	98 2f       	mov	r25, r24
    1d28:	9c 5f       	subi	r25, 0xFC	; 252
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	69 2f       	mov	r22, r25
    1d2e:	0e 94 ef 0c 	call	0x19de	; 0x19de <GPIO_readPin>
    1d32:	88 23       	and	r24, r24
    1d34:	91 f4       	brne	.+36     	; 0x1d5a <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	98 2f       	mov	r25, r24
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	89 0f       	add	r24, r25
    1d4a:	8f 5f       	subi	r24, 0xFF	; 255
    1d4c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	8a 83       	std	Y+2, r24	; 0x02
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	84 30       	cpi	r24, 0x04	; 4
    1d64:	f8 f2       	brcs	.-66     	; 0x1d24 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	69 81       	ldd	r22, Y+1	; 0x01
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	8f 5f       	subi	r24, 0xFF	; 255
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	84 30       	cpi	r24, 0x04	; 4
    1d7a:	40 f2       	brcs	.-112    	; 0x1d0c <KEYPAD_getPressedKey+0x5e>
    1d7c:	c5 cf       	rjmp	.-118    	; 0x1d08 <KEYPAD_getPressedKey+0x5a>

00001d7e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d8c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	3c 83       	std	Y+4, r19	; 0x04
    1d96:	2b 83       	std	Y+3, r18	; 0x03
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	88 30       	cpi	r24, 0x08	; 8
    1d9e:	91 05       	cpc	r25, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1da2:	70 c0       	rjmp	.+224    	; 0x1e84 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1da4:	2b 81       	ldd	r18, Y+3	; 0x03
    1da6:	3c 81       	ldd	r19, Y+4	; 0x04
    1da8:	29 30       	cpi	r18, 0x09	; 9
    1daa:	31 05       	cpc	r19, r1
    1dac:	5c f5       	brge	.+86     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	84 30       	cpi	r24, 0x04	; 4
    1db4:	91 05       	cpc	r25, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1db8:	59 c0       	rjmp	.+178    	; 0x1e6c <KEYPAD_4x4_adjustKeyNumber+0xee>
    1dba:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbe:	25 30       	cpi	r18, 0x05	; 5
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	9c f4       	brge	.+38     	; 0x1dea <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	91 05       	cpc	r25, r1
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1dce:	48 c0       	rjmp	.+144    	; 0x1e60 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1dd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd4:	23 30       	cpi	r18, 0x03	; 3
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	0c f0       	brlt	.+2      	; 0x1ddc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1dda:	45 c0       	rjmp	.+138    	; 0x1e66 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	91 05       	cpc	r25, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1de6:	39 c0       	rjmp	.+114    	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1de8:	67 c0       	rjmp	.+206    	; 0x1eb8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1dea:	2b 81       	ldd	r18, Y+3	; 0x03
    1dec:	3c 81       	ldd	r19, Y+4	; 0x04
    1dee:	26 30       	cpi	r18, 0x06	; 6
    1df0:	31 05       	cpc	r19, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1df4:	41 c0       	rjmp	.+130    	; 0x1e78 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	87 30       	cpi	r24, 0x07	; 7
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	0c f0       	brlt	.+2      	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e00:	3e c0       	rjmp	.+124    	; 0x1e7e <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e02:	37 c0       	rjmp	.+110    	; 0x1e72 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	2c 30       	cpi	r18, 0x0C	; 12
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e0e:	46 c0       	rjmp	.+140    	; 0x1e9c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	8d 30       	cpi	r24, 0x0D	; 13
    1e16:	91 05       	cpc	r25, r1
    1e18:	5c f4       	brge	.+22     	; 0x1e30 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	2a 30       	cpi	r18, 0x0A	; 10
    1e20:	31 05       	cpc	r19, r1
    1e22:	b1 f1       	breq	.+108    	; 0x1e90 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	8b 30       	cpi	r24, 0x0B	; 11
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	a4 f5       	brge	.+104    	; 0x1e96 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e2e:	2d c0       	rjmp	.+90     	; 0x1e8a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e30:	2b 81       	ldd	r18, Y+3	; 0x03
    1e32:	3c 81       	ldd	r19, Y+4	; 0x04
    1e34:	2e 30       	cpi	r18, 0x0E	; 14
    1e36:	31 05       	cpc	r19, r1
    1e38:	b9 f1       	breq	.+110    	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	8e 30       	cpi	r24, 0x0E	; 14
    1e40:	91 05       	cpc	r25, r1
    1e42:	7c f1       	brlt	.+94     	; 0x1ea2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e44:	2b 81       	ldd	r18, Y+3	; 0x03
    1e46:	3c 81       	ldd	r19, Y+4	; 0x04
    1e48:	2f 30       	cpi	r18, 0x0F	; 15
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	79 f1       	breq	.+94     	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	80 31       	cpi	r24, 0x10	; 16
    1e54:	91 05       	cpc	r25, r1
    1e56:	69 f1       	breq	.+90     	; 0x1eb2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e58:	2f c0       	rjmp	.+94     	; 0x1eb8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e5a:	87 e0       	ldi	r24, 0x07	; 7
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	2e c0       	rjmp	.+92     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e60:	88 e0       	ldi	r24, 0x08	; 8
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	2b c0       	rjmp	.+86     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e66:	89 e0       	ldi	r24, 0x09	; 9
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	28 c0       	rjmp	.+80     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e6c:	85 e2       	ldi	r24, 0x25	; 37
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	25 c0       	rjmp	.+74     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e72:	84 e0       	ldi	r24, 0x04	; 4
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	22 c0       	rjmp	.+68     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e78:	85 e0       	ldi	r24, 0x05	; 5
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	1f c0       	rjmp	.+62     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e7e:	86 e0       	ldi	r24, 0x06	; 6
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	1c c0       	rjmp	.+56     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e84:	8a e2       	ldi	r24, 0x2A	; 42
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	19 c0       	rjmp	.+50     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	16 c0       	rjmp	.+44     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	13 c0       	rjmp	.+38     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e96:	83 e0       	ldi	r24, 0x03	; 3
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	10 c0       	rjmp	.+32     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e9c:	8d e2       	ldi	r24, 0x2D	; 45
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ea2:	8d e0       	ldi	r24, 0x0D	; 13
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	0a c0       	rjmp	.+20     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1eac:	8d e3       	ldi	r24, 0x3D	; 61
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1eb2:	8b e2       	ldi	r24, 0x2B	; 43
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 19 0b 	call	0x1632	; 0x1632 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	6f ef       	ldi	r22, 0xFF	; 255
    1ef8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <GPIO_setupPortDirection>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 ea       	ldi	r26, 0xA0	; 160
    1f02:	b1 e4       	ldi	r27, 0x41	; 65
    1f04:	8b 87       	std	Y+11, r24	; 0x0b
    1f06:	9c 87       	std	Y+12, r25	; 0x0c
    1f08:	ad 87       	std	Y+13, r26	; 0x0d
    1f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a e7       	ldi	r20, 0x7A	; 122
    1f1a:	53 e4       	ldi	r21, 0x43	; 67
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8f 83       	std	Y+7, r24	; 0x07
    1f26:	98 87       	std	Y+8, r25	; 0x08
    1f28:	a9 87       	std	Y+9, r26	; 0x09
    1f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2e:	78 85       	ldd	r23, Y+8	; 0x08
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <LCD_init+0x82>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <LCD_init+0x100>
	else if (__tmp > 65535)
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <LCD_init+0xe2>
    1f90:	89 e1       	ldi	r24, 0x19	; 25
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	8b 83       	std	Y+3, r24	; 0x03
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_init+0xd0>
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <LCD_init+0xc4>
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_init+0x10c>
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1fe0:	88 e3       	ldi	r24, 0x38	; 56
    1fe2:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1fe6:	8c e0       	ldi	r24, 0x0C	; 12
    1fe8:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_sendCommand>
}
    1ff2:	2e 96       	adiw	r28, 0x0e	; 14
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	e9 97       	sbiw	r28, 0x39	; 57
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_writePin>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e8       	ldi	r26, 0x80	; 128
    202a:	bf e3       	ldi	r27, 0x3F	; 63
    202c:	8d ab       	std	Y+53, r24	; 0x35
    202e:	9e ab       	std	Y+54, r25	; 0x36
    2030:	af ab       	std	Y+55, r26	; 0x37
    2032:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6d a9       	ldd	r22, Y+53	; 0x35
    2036:	7e a9       	ldd	r23, Y+54	; 0x36
    2038:	8f a9       	ldd	r24, Y+55	; 0x37
    203a:	98 ad       	ldd	r25, Y+56	; 0x38
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	53 e4       	ldi	r21, 0x43	; 67
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	89 ab       	std	Y+49, r24	; 0x31
    204e:	9a ab       	std	Y+50, r25	; 0x32
    2050:	ab ab       	std	Y+51, r26	; 0x33
    2052:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2054:	69 a9       	ldd	r22, Y+49	; 0x31
    2056:	7a a9       	ldd	r23, Y+50	; 0x32
    2058:	8b a9       	ldd	r24, Y+51	; 0x33
    205a:	9c a9       	ldd	r25, Y+52	; 0x34
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <LCD_sendCommand+0x72>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	98 ab       	std	Y+48, r25	; 0x30
    2072:	8f a7       	std	Y+47, r24	; 0x2f
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2076:	69 a9       	ldd	r22, Y+49	; 0x31
    2078:	7a a9       	ldd	r23, Y+50	; 0x32
    207a:	8b a9       	ldd	r24, Y+51	; 0x33
    207c:	9c a9       	ldd	r25, Y+52	; 0x34
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6d a9       	ldd	r22, Y+53	; 0x35
    2090:	7e a9       	ldd	r23, Y+54	; 0x36
    2092:	8f a9       	ldd	r24, Y+55	; 0x37
    2094:	98 ad       	ldd	r25, Y+56	; 0x38
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	98 ab       	std	Y+48, r25	; 0x30
    20b4:	8f a7       	std	Y+47, r24	; 0x2f
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_sendCommand+0xd2>
    20b8:	89 e1       	ldi	r24, 0x19	; 25
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9e a7       	std	Y+46, r25	; 0x2e
    20be:	8d a7       	std	Y+45, r24	; 0x2d
    20c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    20c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_sendCommand+0xc0>
    20c8:	9e a7       	std	Y+46, r25	; 0x2e
    20ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ce:	98 a9       	ldd	r25, Y+48	; 0x30
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	98 ab       	std	Y+48, r25	; 0x30
    20d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d8:	98 a9       	ldd	r25, Y+48	; 0x30
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <LCD_sendCommand+0xb4>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	69 a9       	ldd	r22, Y+49	; 0x31
    20e2:	7a a9       	ldd	r23, Y+50	; 0x32
    20e4:	8b a9       	ldd	r24, Y+51	; 0x33
    20e6:	9c a9       	ldd	r25, Y+52	; 0x34
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	98 ab       	std	Y+48, r25	; 0x30
    20f2:	8f a7       	std	Y+47, r24	; 0x2f
    20f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f6:	98 a9       	ldd	r25, Y+48	; 0x30
    20f8:	9c a7       	std	Y+44, r25	; 0x2c
    20fa:	8b a7       	std	Y+43, r24	; 0x2b
    20fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_sendCommand+0xfc>
    2104:	9c a7       	std	Y+44, r25	; 0x2c
    2106:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_writePin>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e8       	ldi	r26, 0x80	; 128
    2118:	bf e3       	ldi	r27, 0x3F	; 63
    211a:	8f a3       	std	Y+39, r24	; 0x27
    211c:	98 a7       	std	Y+40, r25	; 0x28
    211e:	a9 a7       	std	Y+41, r26	; 0x29
    2120:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6f a1       	ldd	r22, Y+39	; 0x27
    2124:	78 a5       	ldd	r23, Y+40	; 0x28
    2126:	89 a5       	ldd	r24, Y+41	; 0x29
    2128:	9a a5       	ldd	r25, Y+42	; 0x2a
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	53 e4       	ldi	r21, 0x43	; 67
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8b a3       	std	Y+35, r24	; 0x23
    213c:	9c a3       	std	Y+36, r25	; 0x24
    213e:	ad a3       	std	Y+37, r26	; 0x25
    2140:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2142:	6b a1       	ldd	r22, Y+35	; 0x23
    2144:	7c a1       	ldd	r23, Y+36	; 0x24
    2146:	8d a1       	ldd	r24, Y+37	; 0x25
    2148:	9e a1       	ldd	r25, Y+38	; 0x26
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <LCD_sendCommand+0x160>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9a a3       	std	Y+34, r25	; 0x22
    2160:	89 a3       	std	Y+33, r24	; 0x21
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2164:	6b a1       	ldd	r22, Y+35	; 0x23
    2166:	7c a1       	ldd	r23, Y+36	; 0x24
    2168:	8d a1       	ldd	r24, Y+37	; 0x25
    216a:	9e a1       	ldd	r25, Y+38	; 0x26
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6f a1       	ldd	r22, Y+39	; 0x27
    217e:	78 a5       	ldd	r23, Y+40	; 0x28
    2180:	89 a5       	ldd	r24, Y+41	; 0x29
    2182:	9a a5       	ldd	r25, Y+42	; 0x2a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9a a3       	std	Y+34, r25	; 0x22
    21a2:	89 a3       	std	Y+33, r24	; 0x21
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <LCD_sendCommand+0x1c0>
    21a6:	89 e1       	ldi	r24, 0x19	; 25
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	98 a3       	std	Y+32, r25	; 0x20
    21ac:	8f 8f       	std	Y+31, r24	; 0x1f
    21ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21b0:	98 a1       	ldd	r25, Y+32	; 0x20
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_sendCommand+0x1ae>
    21b6:	98 a3       	std	Y+32, r25	; 0x20
    21b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	89 a1       	ldd	r24, Y+33	; 0x21
    21bc:	9a a1       	ldd	r25, Y+34	; 0x22
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9a a3       	std	Y+34, r25	; 0x22
    21c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	89 a1       	ldd	r24, Y+33	; 0x21
    21c6:	9a a1       	ldd	r25, Y+34	; 0x22
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <LCD_sendCommand+0x1a2>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6b a1       	ldd	r22, Y+35	; 0x23
    21d0:	7c a1       	ldd	r23, Y+36	; 0x24
    21d2:	8d a1       	ldd	r24, Y+37	; 0x25
    21d4:	9e a1       	ldd	r25, Y+38	; 0x26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9a a3       	std	Y+34, r25	; 0x22
    21e0:	89 a3       	std	Y+33, r24	; 0x21
    21e2:	89 a1       	ldd	r24, Y+33	; 0x21
    21e4:	9a a1       	ldd	r25, Y+34	; 0x22
    21e6:	9e 8f       	std	Y+30, r25	; 0x1e
    21e8:	8d 8f       	std	Y+29, r24	; 0x1d
    21ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_sendCommand+0x1ea>
    21f2:	9e 8f       	std	Y+30, r25	; 0x1e
    21f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	69 ad       	ldd	r22, Y+57	; 0x39
    21fa:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GPIO_writePort>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	bf e3       	ldi	r27, 0x3F	; 63
    2206:	89 8f       	std	Y+25, r24	; 0x19
    2208:	9a 8f       	std	Y+26, r25	; 0x1a
    220a:	ab 8f       	std	Y+27, r26	; 0x1b
    220c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	69 8d       	ldd	r22, Y+25	; 0x19
    2210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	53 e4       	ldi	r21, 0x43	; 67
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8d 8b       	std	Y+21, r24	; 0x15
    2228:	9e 8b       	std	Y+22, r25	; 0x16
    222a:	af 8b       	std	Y+23, r26	; 0x17
    222c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_sendCommand+0x2ac>
    2292:	89 e1       	ldi	r24, 0x19	; 25
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9a 8b       	std	Y+18, r25	; 0x12
    2298:	89 8b       	std	Y+17, r24	; 0x11
    229a:	89 89       	ldd	r24, Y+17	; 0x11
    229c:	9a 89       	ldd	r25, Y+18	; 0x12
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_sendCommand+0x29a>
    22a2:	9a 8b       	std	Y+18, r25	; 0x12
    22a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8b 89       	ldd	r24, Y+19	; 0x13
    22a8:	9c 89       	ldd	r25, Y+20	; 0x14
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_sendCommand+0x28e>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6d 89       	ldd	r22, Y+21	; 0x15
    22bc:	7e 89       	ldd	r23, Y+22	; 0x16
    22be:	8f 89       	ldd	r24, Y+23	; 0x17
    22c0:	98 8d       	ldd	r25, Y+24	; 0x18
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9c 8b       	std	Y+20, r25	; 0x14
    22cc:	8b 8b       	std	Y+19, r24	; 0x13
    22ce:	8b 89       	ldd	r24, Y+19	; 0x13
    22d0:	9c 89       	ldd	r25, Y+20	; 0x14
    22d2:	98 8b       	std	Y+16, r25	; 0x10
    22d4:	8f 87       	std	Y+15, r24	; 0x0f
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	98 89       	ldd	r25, Y+16	; 0x10
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_sendCommand+0x2d6>
    22de:	98 8b       	std	Y+16, r25	; 0x10
    22e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	61 e0       	ldi	r22, 0x01	; 1
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_writePin>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e8       	ldi	r26, 0x80	; 128
    22f2:	bf e3       	ldi	r27, 0x3F	; 63
    22f4:	8b 87       	std	Y+11, r24	; 0x0b
    22f6:	9c 87       	std	Y+12, r25	; 0x0c
    22f8:	ad 87       	std	Y+13, r26	; 0x0d
    22fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a e7       	ldi	r20, 0x7A	; 122
    230a:	53 e4       	ldi	r21, 0x43	; 67
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8f 83       	std	Y+7, r24	; 0x07
    2316:	98 87       	std	Y+8, r25	; 0x08
    2318:	a9 87       	std	Y+9, r26	; 0x09
    231a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	6b 85       	ldd	r22, Y+11	; 0x0b
    2358:	7c 85       	ldd	r23, Y+12	; 0x0c
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	0f c0       	rjmp	.+30     	; 0x239e <LCD_sendCommand+0x39a>
    2380:	89 e1       	ldi	r24, 0x19	; 25
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	8b 83       	std	Y+3, r24	; 0x03
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_sendCommand+0x388>
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <LCD_sendCommand+0x37c>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_sendCommand+0x3c4>
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    23d0:	e9 96       	adiw	r28, 0x39	; 57
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	e9 97       	sbiw	r28, 0x39	; 57
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_writePin>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e8       	ldi	r26, 0x80	; 128
    2408:	bf e3       	ldi	r27, 0x3F	; 63
    240a:	8d ab       	std	Y+53, r24	; 0x35
    240c:	9e ab       	std	Y+54, r25	; 0x36
    240e:	af ab       	std	Y+55, r26	; 0x37
    2410:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2412:	6d a9       	ldd	r22, Y+53	; 0x35
    2414:	7e a9       	ldd	r23, Y+54	; 0x36
    2416:	8f a9       	ldd	r24, Y+55	; 0x37
    2418:	98 ad       	ldd	r25, Y+56	; 0x38
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	4a e7       	ldi	r20, 0x7A	; 122
    2420:	53 e4       	ldi	r21, 0x43	; 67
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	89 ab       	std	Y+49, r24	; 0x31
    242c:	9a ab       	std	Y+50, r25	; 0x32
    242e:	ab ab       	std	Y+51, r26	; 0x33
    2430:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2432:	69 a9       	ldd	r22, Y+49	; 0x31
    2434:	7a a9       	ldd	r23, Y+50	; 0x32
    2436:	8b a9       	ldd	r24, Y+51	; 0x33
    2438:	9c a9       	ldd	r25, Y+52	; 0x34
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	2c f4       	brge	.+10     	; 0x2454 <LCD_displayCharacter+0x72>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	98 ab       	std	Y+48, r25	; 0x30
    2450:	8f a7       	std	Y+47, r24	; 0x2f
    2452:	3f c0       	rjmp	.+126    	; 0x24d2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2454:	69 a9       	ldd	r22, Y+49	; 0x31
    2456:	7a a9       	ldd	r23, Y+50	; 0x32
    2458:	8b a9       	ldd	r24, Y+51	; 0x33
    245a:	9c a9       	ldd	r25, Y+52	; 0x34
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	3f ef       	ldi	r19, 0xFF	; 255
    2460:	4f e7       	ldi	r20, 0x7F	; 127
    2462:	57 e4       	ldi	r21, 0x47	; 71
    2464:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2468:	18 16       	cp	r1, r24
    246a:	4c f5       	brge	.+82     	; 0x24be <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246c:	6d a9       	ldd	r22, Y+53	; 0x35
    246e:	7e a9       	ldd	r23, Y+54	; 0x36
    2470:	8f a9       	ldd	r24, Y+55	; 0x37
    2472:	98 ad       	ldd	r25, Y+56	; 0x38
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	51 e4       	ldi	r21, 0x41	; 65
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	98 ab       	std	Y+48, r25	; 0x30
    2492:	8f a7       	std	Y+47, r24	; 0x2f
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <LCD_displayCharacter+0xd2>
    2496:	89 e1       	ldi	r24, 0x19	; 25
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9e a7       	std	Y+46, r25	; 0x2e
    249c:	8d a7       	std	Y+45, r24	; 0x2d
    249e:	8d a5       	ldd	r24, Y+45	; 0x2d
    24a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCD_displayCharacter+0xc0>
    24a6:	9e a7       	std	Y+46, r25	; 0x2e
    24a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ac:	98 a9       	ldd	r25, Y+48	; 0x30
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	98 ab       	std	Y+48, r25	; 0x30
    24b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b6:	98 a9       	ldd	r25, Y+48	; 0x30
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	69 f7       	brne	.-38     	; 0x2496 <LCD_displayCharacter+0xb4>
    24bc:	14 c0       	rjmp	.+40     	; 0x24e6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	69 a9       	ldd	r22, Y+49	; 0x31
    24c0:	7a a9       	ldd	r23, Y+50	; 0x32
    24c2:	8b a9       	ldd	r24, Y+51	; 0x33
    24c4:	9c a9       	ldd	r25, Y+52	; 0x34
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	98 ab       	std	Y+48, r25	; 0x30
    24d0:	8f a7       	std	Y+47, r24	; 0x2f
    24d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d4:	98 a9       	ldd	r25, Y+48	; 0x30
    24d6:	9c a7       	std	Y+44, r25	; 0x2c
    24d8:	8b a7       	std	Y+43, r24	; 0x2b
    24da:	8b a5       	ldd	r24, Y+43	; 0x2b
    24dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_displayCharacter+0xfc>
    24e2:	9c a7       	std	Y+44, r25	; 0x2c
    24e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	61 e0       	ldi	r22, 0x01	; 1
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_writePin>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a0 e8       	ldi	r26, 0x80	; 128
    24f6:	bf e3       	ldi	r27, 0x3F	; 63
    24f8:	8f a3       	std	Y+39, r24	; 0x27
    24fa:	98 a7       	std	Y+40, r25	; 0x28
    24fc:	a9 a7       	std	Y+41, r26	; 0x29
    24fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2500:	6f a1       	ldd	r22, Y+39	; 0x27
    2502:	78 a5       	ldd	r23, Y+40	; 0x28
    2504:	89 a5       	ldd	r24, Y+41	; 0x29
    2506:	9a a5       	ldd	r25, Y+42	; 0x2a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	4a e7       	ldi	r20, 0x7A	; 122
    250e:	53 e4       	ldi	r21, 0x43	; 67
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8b a3       	std	Y+35, r24	; 0x23
    251a:	9c a3       	std	Y+36, r25	; 0x24
    251c:	ad a3       	std	Y+37, r26	; 0x25
    251e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2520:	6b a1       	ldd	r22, Y+35	; 0x23
    2522:	7c a1       	ldd	r23, Y+36	; 0x24
    2524:	8d a1       	ldd	r24, Y+37	; 0x25
    2526:	9e a1       	ldd	r25, Y+38	; 0x26
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e8       	ldi	r20, 0x80	; 128
    252e:	5f e3       	ldi	r21, 0x3F	; 63
    2530:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2534:	88 23       	and	r24, r24
    2536:	2c f4       	brge	.+10     	; 0x2542 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9a a3       	std	Y+34, r25	; 0x22
    253e:	89 a3       	std	Y+33, r24	; 0x21
    2540:	3f c0       	rjmp	.+126    	; 0x25c0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2542:	6b a1       	ldd	r22, Y+35	; 0x23
    2544:	7c a1       	ldd	r23, Y+36	; 0x24
    2546:	8d a1       	ldd	r24, Y+37	; 0x25
    2548:	9e a1       	ldd	r25, Y+38	; 0x26
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	4c f5       	brge	.+82     	; 0x25ac <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	6f a1       	ldd	r22, Y+39	; 0x27
    255c:	78 a5       	ldd	r23, Y+40	; 0x28
    255e:	89 a5       	ldd	r24, Y+41	; 0x29
    2560:	9a a5       	ldd	r25, Y+42	; 0x2a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9a a3       	std	Y+34, r25	; 0x22
    2580:	89 a3       	std	Y+33, r24	; 0x21
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_displayCharacter+0x1c0>
    2584:	89 e1       	ldi	r24, 0x19	; 25
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	98 a3       	std	Y+32, r25	; 0x20
    258a:	8f 8f       	std	Y+31, r24	; 0x1f
    258c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    258e:	98 a1       	ldd	r25, Y+32	; 0x20
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_displayCharacter+0x1ae>
    2594:	98 a3       	std	Y+32, r25	; 0x20
    2596:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2598:	89 a1       	ldd	r24, Y+33	; 0x21
    259a:	9a a1       	ldd	r25, Y+34	; 0x22
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	9a a3       	std	Y+34, r25	; 0x22
    25a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	89 a1       	ldd	r24, Y+33	; 0x21
    25a4:	9a a1       	ldd	r25, Y+34	; 0x22
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	69 f7       	brne	.-38     	; 0x2584 <LCD_displayCharacter+0x1a2>
    25aa:	14 c0       	rjmp	.+40     	; 0x25d4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	6b a1       	ldd	r22, Y+35	; 0x23
    25ae:	7c a1       	ldd	r23, Y+36	; 0x24
    25b0:	8d a1       	ldd	r24, Y+37	; 0x25
    25b2:	9e a1       	ldd	r25, Y+38	; 0x26
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9a a3       	std	Y+34, r25	; 0x22
    25be:	89 a3       	std	Y+33, r24	; 0x21
    25c0:	89 a1       	ldd	r24, Y+33	; 0x21
    25c2:	9a a1       	ldd	r25, Y+34	; 0x22
    25c4:	9e 8f       	std	Y+30, r25	; 0x1e
    25c6:	8d 8f       	std	Y+29, r24	; 0x1d
    25c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_displayCharacter+0x1ea>
    25d0:	9e 8f       	std	Y+30, r25	; 0x1e
    25d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	69 ad       	ldd	r22, Y+57	; 0x39
    25d8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <GPIO_writePort>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 e8       	ldi	r26, 0x80	; 128
    25e2:	bf e3       	ldi	r27, 0x3F	; 63
    25e4:	89 8f       	std	Y+25, r24	; 0x19
    25e6:	9a 8f       	std	Y+26, r25	; 0x1a
    25e8:	ab 8f       	std	Y+27, r26	; 0x1b
    25ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	69 8d       	ldd	r22, Y+25	; 0x19
    25ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4a e7       	ldi	r20, 0x7A	; 122
    25fa:	53 e4       	ldi	r21, 0x43	; 67
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8d 8b       	std	Y+21, r24	; 0x15
    2606:	9e 8b       	std	Y+22, r25	; 0x16
    2608:	af 8b       	std	Y+23, r26	; 0x17
    260a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    260c:	6d 89       	ldd	r22, Y+21	; 0x15
    260e:	7e 89       	ldd	r23, Y+22	; 0x16
    2610:	8f 89       	ldd	r24, Y+23	; 0x17
    2612:	98 8d       	ldd	r25, Y+24	; 0x18
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	2c f4       	brge	.+10     	; 0x262e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9c 8b       	std	Y+20, r25	; 0x14
    262a:	8b 8b       	std	Y+19, r24	; 0x13
    262c:	3f c0       	rjmp	.+126    	; 0x26ac <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    262e:	6d 89       	ldd	r22, Y+21	; 0x15
    2630:	7e 89       	ldd	r23, Y+22	; 0x16
    2632:	8f 89       	ldd	r24, Y+23	; 0x17
    2634:	98 8d       	ldd	r25, Y+24	; 0x18
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	4c f5       	brge	.+82     	; 0x2698 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	69 8d       	ldd	r22, Y+25	; 0x19
    2648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9c 8b       	std	Y+20, r25	; 0x14
    266c:	8b 8b       	std	Y+19, r24	; 0x13
    266e:	0f c0       	rjmp	.+30     	; 0x268e <LCD_displayCharacter+0x2ac>
    2670:	89 e1       	ldi	r24, 0x19	; 25
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9a 8b       	std	Y+18, r25	; 0x12
    2676:	89 8b       	std	Y+17, r24	; 0x11
    2678:	89 89       	ldd	r24, Y+17	; 0x11
    267a:	9a 89       	ldd	r25, Y+18	; 0x12
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_displayCharacter+0x29a>
    2680:	9a 8b       	std	Y+18, r25	; 0x12
    2682:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	8b 89       	ldd	r24, Y+19	; 0x13
    2686:	9c 89       	ldd	r25, Y+20	; 0x14
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	9c 8b       	std	Y+20, r25	; 0x14
    268c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	69 f7       	brne	.-38     	; 0x2670 <LCD_displayCharacter+0x28e>
    2696:	14 c0       	rjmp	.+40     	; 0x26c0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2698:	6d 89       	ldd	r22, Y+21	; 0x15
    269a:	7e 89       	ldd	r23, Y+22	; 0x16
    269c:	8f 89       	ldd	r24, Y+23	; 0x17
    269e:	98 8d       	ldd	r25, Y+24	; 0x18
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9c 8b       	std	Y+20, r25	; 0x14
    26aa:	8b 8b       	std	Y+19, r24	; 0x13
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	98 8b       	std	Y+16, r25	; 0x10
    26b2:	8f 87       	std	Y+15, r24	; 0x0f
    26b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b6:	98 89       	ldd	r25, Y+16	; 0x10
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <LCD_displayCharacter+0x2d6>
    26bc:	98 8b       	std	Y+16, r25	; 0x10
    26be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_writePin>
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e8       	ldi	r26, 0x80	; 128
    26d0:	bf e3       	ldi	r27, 0x3F	; 63
    26d2:	8b 87       	std	Y+11, r24	; 0x0b
    26d4:	9c 87       	std	Y+12, r25	; 0x0c
    26d6:	ad 87       	std	Y+13, r26	; 0x0d
    26d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26da:	6b 85       	ldd	r22, Y+11	; 0x0b
    26dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26de:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	4a e7       	ldi	r20, 0x7A	; 122
    26e8:	53 e4       	ldi	r21, 0x43	; 67
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	8f 83       	std	Y+7, r24	; 0x07
    26f4:	98 87       	std	Y+8, r25	; 0x08
    26f6:	a9 87       	std	Y+9, r26	; 0x09
    26f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26fa:	6f 81       	ldd	r22, Y+7	; 0x07
    26fc:	78 85       	ldd	r23, Y+8	; 0x08
    26fe:	89 85       	ldd	r24, Y+9	; 0x09
    2700:	9a 85       	ldd	r25, Y+10	; 0x0a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	2c f4       	brge	.+10     	; 0x271c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9e 83       	std	Y+6, r25	; 0x06
    2718:	8d 83       	std	Y+5, r24	; 0x05
    271a:	3f c0       	rjmp	.+126    	; 0x279a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    271c:	6f 81       	ldd	r22, Y+7	; 0x07
    271e:	78 85       	ldd	r23, Y+8	; 0x08
    2720:	89 85       	ldd	r24, Y+9	; 0x09
    2722:	9a 85       	ldd	r25, Y+10	; 0x0a
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	3f ef       	ldi	r19, 0xFF	; 255
    2728:	4f e7       	ldi	r20, 0x7F	; 127
    272a:	57 e4       	ldi	r21, 0x47	; 71
    272c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2730:	18 16       	cp	r1, r24
    2732:	4c f5       	brge	.+82     	; 0x2786 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2734:	6b 85       	ldd	r22, Y+11	; 0x0b
    2736:	7c 85       	ldd	r23, Y+12	; 0x0c
    2738:	8d 85       	ldd	r24, Y+13	; 0x0d
    273a:	9e 85       	ldd	r25, Y+14	; 0x0e
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e2       	ldi	r20, 0x20	; 32
    2742:	51 e4       	ldi	r21, 0x41	; 65
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	0f c0       	rjmp	.+30     	; 0x277c <LCD_displayCharacter+0x39a>
    275e:	89 e1       	ldi	r24, 0x19	; 25
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <LCD_displayCharacter+0x388>
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2772:	8d 81       	ldd	r24, Y+5	; 0x05
    2774:	9e 81       	ldd	r25, Y+6	; 0x06
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	69 f7       	brne	.-38     	; 0x275e <LCD_displayCharacter+0x37c>
    2784:	14 c0       	rjmp	.+40     	; 0x27ae <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9e 83       	std	Y+6, r25	; 0x06
    2798:	8d 83       	std	Y+5, r24	; 0x05
    279a:	8d 81       	ldd	r24, Y+5	; 0x05
    279c:	9e 81       	ldd	r25, Y+6	; 0x06
    279e:	9a 83       	std	Y+2, r25	; 0x02
    27a0:	89 83       	std	Y+1, r24	; 0x01
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	9a 81       	ldd	r25, Y+2	; 0x02
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_displayCharacter+0x3c4>
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    27ae:	e9 96       	adiw	r28, 0x39	; 57
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <LCD_displayString+0x6>
    27c6:	0f 92       	push	r0
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	9b 83       	std	Y+3, r25	; 0x03
    27ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27d0:	19 82       	std	Y+1, r1	; 0x01
    27d2:	0e c0       	rjmp	.+28     	; 0x27f0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	9b 81       	ldd	r25, Y+3	; 0x03
    27de:	fc 01       	movw	r30, r24
    27e0:	e2 0f       	add	r30, r18
    27e2:	f3 1f       	adc	r31, r19
    27e4:	80 81       	ld	r24, Z
    27e6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_displayCharacter>
		i++;
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	8f 5f       	subi	r24, 0xFF	; 255
    27ee:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	9b 81       	ldd	r25, Y+3	; 0x03
    27fa:	fc 01       	movw	r30, r24
    27fc:	e2 0f       	add	r30, r18
    27fe:	f3 1f       	adc	r31, r19
    2800:	80 81       	ld	r24, Z
    2802:	88 23       	and	r24, r24
    2804:	39 f7       	brne	.-50     	; 0x27d4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	00 d0       	rcall	.+0      	; 0x2818 <LCD_moveCursor+0x6>
    2818:	00 d0       	rcall	.+0      	; 0x281a <LCD_moveCursor+0x8>
    281a:	0f 92       	push	r0
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	8a 83       	std	Y+2, r24	; 0x02
    2822:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	28 2f       	mov	r18, r24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	3d 83       	std	Y+5, r19	; 0x05
    282c:	2c 83       	std	Y+4, r18	; 0x04
    282e:	8c 81       	ldd	r24, Y+4	; 0x04
    2830:	9d 81       	ldd	r25, Y+5	; 0x05
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	91 05       	cpc	r25, r1
    2836:	c1 f0       	breq	.+48     	; 0x2868 <LCD_moveCursor+0x56>
    2838:	2c 81       	ldd	r18, Y+4	; 0x04
    283a:	3d 81       	ldd	r19, Y+5	; 0x05
    283c:	22 30       	cpi	r18, 0x02	; 2
    283e:	31 05       	cpc	r19, r1
    2840:	2c f4       	brge	.+10     	; 0x284c <LCD_moveCursor+0x3a>
    2842:	8c 81       	ldd	r24, Y+4	; 0x04
    2844:	9d 81       	ldd	r25, Y+5	; 0x05
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	61 f0       	breq	.+24     	; 0x2862 <LCD_moveCursor+0x50>
    284a:	19 c0       	rjmp	.+50     	; 0x287e <LCD_moveCursor+0x6c>
    284c:	2c 81       	ldd	r18, Y+4	; 0x04
    284e:	3d 81       	ldd	r19, Y+5	; 0x05
    2850:	22 30       	cpi	r18, 0x02	; 2
    2852:	31 05       	cpc	r19, r1
    2854:	69 f0       	breq	.+26     	; 0x2870 <LCD_moveCursor+0x5e>
    2856:	8c 81       	ldd	r24, Y+4	; 0x04
    2858:	9d 81       	ldd	r25, Y+5	; 0x05
    285a:	83 30       	cpi	r24, 0x03	; 3
    285c:	91 05       	cpc	r25, r1
    285e:	61 f0       	breq	.+24     	; 0x2878 <LCD_moveCursor+0x66>
    2860:	0e c0       	rjmp	.+28     	; 0x287e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	0b c0       	rjmp	.+22     	; 0x287e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	80 5c       	subi	r24, 0xC0	; 192
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	07 c0       	rjmp	.+14     	; 0x287e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	80 5f       	subi	r24, 0xF0	; 240
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	03 c0       	rjmp	.+6      	; 0x287e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	80 5b       	subi	r24, 0xB0	; 176
    287c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	80 68       	ori	r24, 0x80	; 128
    2882:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_sendCommand>
}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <LCD_displayStringRowColumn+0x6>
    289c:	00 d0       	rcall	.+0      	; 0x289e <LCD_displayStringRowColumn+0x8>
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	6a 83       	std	Y+2, r22	; 0x02
    28a6:	5c 83       	std	Y+4, r21	; 0x04
    28a8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	6a 81       	ldd	r22, Y+2	; 0x02
    28ae:	0e 94 09 14 	call	0x2812	; 0x2812 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <LCD_displayString>
}
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	62 97       	sbiw	r28, 0x12	; 18
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	9a 8b       	std	Y+18, r25	; 0x12
    28de:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    28e0:	89 89       	ldd	r24, Y+17	; 0x11
    28e2:	9a 89       	ldd	r25, Y+18	; 0x12
    28e4:	9e 01       	movw	r18, r28
    28e6:	2f 5f       	subi	r18, 0xFF	; 255
    28e8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ea:	b9 01       	movw	r22, r18
    28ec:	4a e0       	ldi	r20, 0x0A	; 10
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <itoa>
   LCD_displayString(buff); /* Display the string */
    28f4:	ce 01       	movw	r24, r28
    28f6:	01 96       	adiw	r24, 0x01	; 1
    28f8:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <LCD_displayString>
}
    28fc:	62 96       	adiw	r28, 0x12	; 18
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_sendCommand>
}
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <__vector_9>:

/*
 * ISR in case of OVERFLOW mood
 */
ISR(TIMER1_OVF_vect)
{
    2922:	1f 92       	push	r1
    2924:	0f 92       	push	r0
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	0f 92       	push	r0
    292a:	11 24       	eor	r1, r1
    292c:	2f 93       	push	r18
    292e:	3f 93       	push	r19
    2930:	4f 93       	push	r20
    2932:	5f 93       	push	r21
    2934:	6f 93       	push	r22
    2936:	7f 93       	push	r23
    2938:	8f 93       	push	r24
    293a:	9f 93       	push	r25
    293c:	af 93       	push	r26
    293e:	bf 93       	push	r27
    2940:	ef 93       	push	r30
    2942:	ff 93       	push	r31
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    294c:	80 91 0d 01 	lds	r24, 0x010D
    2950:	90 91 0e 01 	lds	r25, 0x010E
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	29 f0       	breq	.+10     	; 0x2962 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2958:	e0 91 0d 01 	lds	r30, 0x010D
    295c:	f0 91 0e 01 	lds	r31, 0x010E
    2960:	09 95       	icall
	}
}
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	ff 91       	pop	r31
    2968:	ef 91       	pop	r30
    296a:	bf 91       	pop	r27
    296c:	af 91       	pop	r26
    296e:	9f 91       	pop	r25
    2970:	8f 91       	pop	r24
    2972:	7f 91       	pop	r23
    2974:	6f 91       	pop	r22
    2976:	5f 91       	pop	r21
    2978:	4f 91       	pop	r20
    297a:	3f 91       	pop	r19
    297c:	2f 91       	pop	r18
    297e:	0f 90       	pop	r0
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	0f 90       	pop	r0
    2984:	1f 90       	pop	r1
    2986:	18 95       	reti

00002988 <__vector_7>:
/*
 * ISR in case of COMPARE mood
 */

ISR(TIMER1_COMPA_vect)
{
    2988:	1f 92       	push	r1
    298a:	0f 92       	push	r0
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	0f 92       	push	r0
    2990:	11 24       	eor	r1, r1
    2992:	2f 93       	push	r18
    2994:	3f 93       	push	r19
    2996:	4f 93       	push	r20
    2998:	5f 93       	push	r21
    299a:	6f 93       	push	r22
    299c:	7f 93       	push	r23
    299e:	8f 93       	push	r24
    29a0:	9f 93       	push	r25
    29a2:	af 93       	push	r26
    29a4:	bf 93       	push	r27
    29a6:	ef 93       	push	r30
    29a8:	ff 93       	push	r31
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    29b2:	80 91 0d 01 	lds	r24, 0x010D
    29b6:	90 91 0e 01 	lds	r25, 0x010E
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	29 f0       	breq	.+10     	; 0x29c8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    29be:	e0 91 0d 01 	lds	r30, 0x010D
    29c2:	f0 91 0e 01 	lds	r31, 0x010E
    29c6:	09 95       	icall
	}
}
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	ff 91       	pop	r31
    29ce:	ef 91       	pop	r30
    29d0:	bf 91       	pop	r27
    29d2:	af 91       	pop	r26
    29d4:	9f 91       	pop	r25
    29d6:	8f 91       	pop	r24
    29d8:	7f 91       	pop	r23
    29da:	6f 91       	pop	r22
    29dc:	5f 91       	pop	r21
    29de:	4f 91       	pop	r20
    29e0:	3f 91       	pop	r19
    29e2:	2f 91       	pop	r18
    29e4:	0f 90       	pop	r0
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	0f 90       	pop	r0
    29ea:	1f 90       	pop	r1
    29ec:	18 95       	reti

000029ee <Timer1_init>:


void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <Timer1_init+0x6>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    29fc:	ef e4       	ldi	r30, 0x4F	; 79
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	8c e0       	ldi	r24, 0x0C	; 12
    2a02:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF7) |(Config_Ptr->mode << WGM12);
    2a04:	ae e4       	ldi	r26, 0x4E	; 78
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	ee e4       	ldi	r30, 0x4E	; 78
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	28 2f       	mov	r18, r24
    2a10:	27 7f       	andi	r18, 0xF7	; 247
    2a12:	e9 81       	ldd	r30, Y+1	; 0x01
    2a14:	fa 81       	ldd	r31, Y+2	; 0x02
    2a16:	85 81       	ldd	r24, Z+5	; 0x05
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	88 0f       	add	r24, r24
    2a22:	99 1f       	adc	r25, r25
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	82 2b       	or	r24, r18
    2a2a:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2a2c:	ae e4       	ldi	r26, 0x4E	; 78
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	ee e4       	ldi	r30, 0x4E	; 78
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	98 2f       	mov	r25, r24
    2a38:	98 7f       	andi	r25, 0xF8	; 248
    2a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3e:	84 81       	ldd	r24, Z+4	; 0x04
    2a40:	89 2b       	or	r24, r25
    2a42:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
    2a44:	ac e4       	ldi	r26, 0x4C	; 76
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	11 96       	adiw	r26, 0x01	; 1
    2a52:	9c 93       	st	X, r25
    2a54:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == ctc)
    2a56:	e9 81       	ldd	r30, Y+1	; 0x01
    2a58:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5a:	85 81       	ldd	r24, Z+5	; 0x05
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	51 f4       	brne	.+20     	; 0x2a74 <Timer1_init+0x86>
	{
		OCR1A = Config_Ptr->compare_value;
    2a60:	ea e4       	ldi	r30, 0x4A	; 74
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	a9 81       	ldd	r26, Y+1	; 0x01
    2a66:	ba 81       	ldd	r27, Y+2	; 0x02
    2a68:	12 96       	adiw	r26, 0x02	; 2
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	13 97       	sbiw	r26, 0x03	; 3
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
	}
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1) ; //choose prescaler of timer 1
    2a74:	a9 e5       	ldi	r26, 0x59	; 89
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e9 e5       	ldi	r30, 0x59	; 89
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	84 61       	ori	r24, 0x14	; 20
    2a80:	8c 93       	st	X, r24

	//sei();
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <Timer1_deInit>:




void Timer1_deInit(void)
{
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0;
    2a94:	ef e4       	ldi	r30, 0x4F	; 79
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	10 82       	st	Z, r1
	TCCR1B = 0;
    2a9a:	ee e4       	ldi	r30, 0x4E	; 78
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	10 82       	st	Z, r1
	TCNT1 = 0;
    2aa0:	ec e4       	ldi	r30, 0x4C	; 76
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	11 82       	std	Z+1, r1	; 0x01
    2aa6:	10 82       	st	Z, r1
	OCR1A = 0;
    2aa8:	ea e4       	ldi	r30, 0x4A	; 74
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	11 82       	std	Z+1, r1	; 0x01
    2aae:	10 82       	st	Z, r1

}
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <Timer1_setCallBack+0x6>
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	90 93 0e 01 	sts	0x010E, r25
    2acc:	80 93 0d 01 	sts	0x010D, r24

}
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * UART_Configs_Ptr)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <UART_init+0x6>
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <UART_init+0x8>
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	9c 83       	std	Y+4, r25	; 0x04
    2ae8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2aea:	1a 82       	std	Y+2, r1	; 0x02
    2aec:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2aee:	eb e2       	ldi	r30, 0x2B	; 43
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = Bit-2 of bit data
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2af6:	ea e2       	ldi	r30, 0x2A	; 42
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	88 e1       	ldi	r24, 0x18	; 24
    2afc:	80 83       	st	Z, r24
	UCSRB = (UCSRB & (0XFB)) | ((UART_Configs_Ptr -> bit_Data) & (0X04));
    2afe:	aa e2       	ldi	r26, 0x2A	; 42
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	ea e2       	ldi	r30, 0x2A	; 42
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	98 2f       	mov	r25, r24
    2b0a:	9b 7f       	andi	r25, 0xFB	; 251
    2b0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b10:	80 81       	ld	r24, Z
    2b12:	84 70       	andi	r24, 0x04	; 4
    2b14:	89 2b       	or	r24, r25
    2b16:	8c 93       	st	X, r24
	 * UPM1:0  = Parity bits of configurations
	 * USBS    = Stop bit of configurations
	 * UCSZ1:0 = data bits of configurations
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL);
    2b18:	e0 e4       	ldi	r30, 0x40	; 64
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 e8       	ldi	r24, 0x80	; 128
    2b1e:	80 83       	st	Z, r24
	UCSRC = (UCSRC & (0XFC)) | (((UART_Configs_Ptr -> bit_Data) & (0XFB)) << 1);
    2b20:	a0 e4       	ldi	r26, 0x40	; 64
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e0 e4       	ldi	r30, 0x40	; 64
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	2c 7f       	andi	r18, 0xFC	; 252
    2b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b30:	fc 81       	ldd	r31, Y+4	; 0x04
    2b32:	80 81       	ld	r24, Z
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	8b 7f       	andi	r24, 0xFB	; 251
    2b3a:	90 70       	andi	r25, 0x00	; 0
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	82 2b       	or	r24, r18
    2b42:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XF7)) | ((UART_Configs_Ptr -> stop_Bit) << 3);
    2b44:	a0 e4       	ldi	r26, 0x40	; 64
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e0 e4       	ldi	r30, 0x40	; 64
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	28 2f       	mov	r18, r24
    2b50:	27 7f       	andi	r18, 0xF7	; 247
    2b52:	eb 81       	ldd	r30, Y+3	; 0x03
    2b54:	fc 81       	ldd	r31, Y+4	; 0x04
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	82 2b       	or	r24, r18
    2b6a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & (0XCF)) | ((UART_Configs_Ptr -> parity) << 4);
    2b6c:	a0 e4       	ldi	r26, 0x40	; 64
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e0 e4       	ldi	r30, 0x40	; 64
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	28 2f       	mov	r18, r24
    2b78:	2f 7c       	andi	r18, 0xCF	; 207
    2b7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b7e:	81 81       	ldd	r24, Z+1	; 0x01
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	82 95       	swap	r24
    2b86:	92 95       	swap	r25
    2b88:	90 7f       	andi	r25, 0xF0	; 240
    2b8a:	98 27       	eor	r25, r24
    2b8c:	80 7f       	andi	r24, 0xF0	; 240
    2b8e:	98 27       	eor	r25, r24
    2b90:	82 2b       	or	r24, r18
    2b92:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Configs_Ptr -> baud_Rate) * 8UL))) - 1);
    2b94:	eb 81       	ldd	r30, Y+3	; 0x03
    2b96:	fc 81       	ldd	r31, Y+4	; 0x04
    2b98:	83 81       	ldd	r24, Z+3	; 0x03
    2b9a:	94 81       	ldd	r25, Z+4	; 0x04
    2b9c:	a5 81       	ldd	r26, Z+5	; 0x05
    2b9e:	b6 81       	ldd	r27, Z+6	; 0x06
    2ba0:	88 0f       	add	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	aa 1f       	adc	r26, r26
    2ba6:	bb 1f       	adc	r27, r27
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	aa 1f       	adc	r26, r26
    2bae:	bb 1f       	adc	r27, r27
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	aa 1f       	adc	r26, r26
    2bb6:	bb 1f       	adc	r27, r27
    2bb8:	9c 01       	movw	r18, r24
    2bba:	ad 01       	movw	r20, r26
    2bbc:	80 e4       	ldi	r24, 0x40	; 64
    2bbe:	92 e4       	ldi	r25, 0x42	; 66
    2bc0:	af e0       	ldi	r26, 0x0F	; 15
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__udivmodsi4>
    2bcc:	da 01       	movw	r26, r20
    2bce:	c9 01       	movw	r24, r18
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	9a 83       	std	Y+2, r25	; 0x02
    2bd4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2bd6:	e0 e4       	ldi	r30, 0x40	; 64
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	89 2f       	mov	r24, r25
    2be0:	99 27       	eor	r25, r25
    2be2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2be4:	e9 e2       	ldi	r30, 0x29	; 41
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	80 83       	st	Z, r24
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	0f 92       	push	r0
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c06:	eb e2       	ldi	r30, 0x2B	; 43
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	80 72       	andi	r24, 0x20	; 32
    2c12:	90 70       	andi	r25, 0x00	; 0
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	b9 f3       	breq	.-18     	; 0x2c06 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c18:	ec e2       	ldi	r30, 0x2C	; 44
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c30:	eb e2       	ldi	r30, 0x2B	; 43
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	88 23       	and	r24, r24
    2c38:	dc f7       	brge	.-10     	; 0x2c30 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2c3a:	ec e2       	ldi	r30, 0x2C	; 44
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
}
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <UART_sendString+0x6>
    2c4c:	0f 92       	push	r0
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	9b 83       	std	Y+3, r25	; 0x03
    2c54:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c56:	19 82       	std	Y+1, r1	; 0x01
    2c58:	0e c0       	rjmp	.+28     	; 0x2c76 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	28 2f       	mov	r18, r24
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	fc 01       	movw	r30, r24
    2c66:	e2 0f       	add	r30, r18
    2c68:	f3 1f       	adc	r31, r19
    2c6a:	80 81       	ld	r24, Z
    2c6c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <UART_sendByte>
		i++;
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	8f 5f       	subi	r24, 0xFF	; 255
    2c74:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c80:	fc 01       	movw	r30, r24
    2c82:	e2 0f       	add	r30, r18
    2c84:	f3 1f       	adc	r31, r19
    2c86:	80 81       	ld	r24, Z
    2c88:	88 23       	and	r24, r24
    2c8a:	39 f7       	brne	.-50     	; 0x2c5a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c98:	0f 93       	push	r16
    2c9a:	1f 93       	push	r17
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <UART_receiveString+0xa>
    2ca2:	0f 92       	push	r0
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	9b 83       	std	Y+3, r25	; 0x03
    2caa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cac:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	8c 01       	movw	r16, r24
    2cba:	02 0f       	add	r16, r18
    2cbc:	13 1f       	adc	r17, r19
    2cbe:	0e 94 14 16 	call	0x2c28	; 0x2c28 <UART_recieveByte>
    2cc2:	f8 01       	movw	r30, r16
    2cc4:	80 83       	st	Z, r24
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	8f 5f       	subi	r24, 0xFF	; 255
    2ccc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd8:	8c 01       	movw	r16, r24
    2cda:	02 0f       	add	r16, r18
    2cdc:	13 1f       	adc	r17, r19
    2cde:	0e 94 14 16 	call	0x2c28	; 0x2c28 <UART_recieveByte>
    2ce2:	f8 01       	movw	r30, r16
    2ce4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	28 2f       	mov	r18, r24
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	e2 0f       	add	r30, r18
    2cf4:	f3 1f       	adc	r31, r19
    2cf6:	80 81       	ld	r24, Z
    2cf8:	83 32       	cpi	r24, 0x23	; 35
    2cfa:	31 f7       	brne	.-52     	; 0x2cc8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	9b 81       	ldd	r25, Y+3	; 0x03
    2d06:	fc 01       	movw	r30, r24
    2d08:	e2 0f       	add	r30, r18
    2d0a:	f3 1f       	adc	r31, r19
    2d0c:	10 82       	st	Z, r1
}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	08 95       	ret

00002d1e <__udivmodsi4>:
    2d1e:	a1 e2       	ldi	r26, 0x21	; 33
    2d20:	1a 2e       	mov	r1, r26
    2d22:	aa 1b       	sub	r26, r26
    2d24:	bb 1b       	sub	r27, r27
    2d26:	fd 01       	movw	r30, r26
    2d28:	0d c0       	rjmp	.+26     	; 0x2d44 <__udivmodsi4_ep>

00002d2a <__udivmodsi4_loop>:
    2d2a:	aa 1f       	adc	r26, r26
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	ee 1f       	adc	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	a2 17       	cp	r26, r18
    2d34:	b3 07       	cpc	r27, r19
    2d36:	e4 07       	cpc	r30, r20
    2d38:	f5 07       	cpc	r31, r21
    2d3a:	20 f0       	brcs	.+8      	; 0x2d44 <__udivmodsi4_ep>
    2d3c:	a2 1b       	sub	r26, r18
    2d3e:	b3 0b       	sbc	r27, r19
    2d40:	e4 0b       	sbc	r30, r20
    2d42:	f5 0b       	sbc	r31, r21

00002d44 <__udivmodsi4_ep>:
    2d44:	66 1f       	adc	r22, r22
    2d46:	77 1f       	adc	r23, r23
    2d48:	88 1f       	adc	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	1a 94       	dec	r1
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <__udivmodsi4_loop>
    2d50:	60 95       	com	r22
    2d52:	70 95       	com	r23
    2d54:	80 95       	com	r24
    2d56:	90 95       	com	r25
    2d58:	9b 01       	movw	r18, r22
    2d5a:	ac 01       	movw	r20, r24
    2d5c:	bd 01       	movw	r22, r26
    2d5e:	cf 01       	movw	r24, r30
    2d60:	08 95       	ret

00002d62 <__prologue_saves__>:
    2d62:	2f 92       	push	r2
    2d64:	3f 92       	push	r3
    2d66:	4f 92       	push	r4
    2d68:	5f 92       	push	r5
    2d6a:	6f 92       	push	r6
    2d6c:	7f 92       	push	r7
    2d6e:	8f 92       	push	r8
    2d70:	9f 92       	push	r9
    2d72:	af 92       	push	r10
    2d74:	bf 92       	push	r11
    2d76:	cf 92       	push	r12
    2d78:	df 92       	push	r13
    2d7a:	ef 92       	push	r14
    2d7c:	ff 92       	push	r15
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	ca 1b       	sub	r28, r26
    2d8c:	db 0b       	sbc	r29, r27
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	09 94       	ijmp

00002d9a <__epilogue_restores__>:
    2d9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d9c:	39 88       	ldd	r3, Y+17	; 0x11
    2d9e:	48 88       	ldd	r4, Y+16	; 0x10
    2da0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2da2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2da8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2daa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dac:	b9 84       	ldd	r11, Y+9	; 0x09
    2dae:	c8 84       	ldd	r12, Y+8	; 0x08
    2db0:	df 80       	ldd	r13, Y+7	; 0x07
    2db2:	ee 80       	ldd	r14, Y+6	; 0x06
    2db4:	fd 80       	ldd	r15, Y+5	; 0x05
    2db6:	0c 81       	ldd	r16, Y+4	; 0x04
    2db8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dba:	aa 81       	ldd	r26, Y+2	; 0x02
    2dbc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dbe:	ce 0f       	add	r28, r30
    2dc0:	d1 1d       	adc	r29, r1
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	ed 01       	movw	r28, r26
    2dce:	08 95       	ret

00002dd0 <itoa>:
    2dd0:	fb 01       	movw	r30, r22
    2dd2:	9f 01       	movw	r18, r30
    2dd4:	e8 94       	clt
    2dd6:	42 30       	cpi	r20, 0x02	; 2
    2dd8:	c4 f0       	brlt	.+48     	; 0x2e0a <itoa+0x3a>
    2dda:	45 32       	cpi	r20, 0x25	; 37
    2ddc:	b4 f4       	brge	.+44     	; 0x2e0a <itoa+0x3a>
    2dde:	4a 30       	cpi	r20, 0x0A	; 10
    2de0:	29 f4       	brne	.+10     	; 0x2dec <itoa+0x1c>
    2de2:	97 fb       	bst	r25, 7
    2de4:	1e f4       	brtc	.+6      	; 0x2dec <itoa+0x1c>
    2de6:	90 95       	com	r25
    2de8:	81 95       	neg	r24
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	64 2f       	mov	r22, r20
    2dee:	77 27       	eor	r23, r23
    2df0:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__udivmodhi4>
    2df4:	80 5d       	subi	r24, 0xD0	; 208
    2df6:	8a 33       	cpi	r24, 0x3A	; 58
    2df8:	0c f0       	brlt	.+2      	; 0x2dfc <itoa+0x2c>
    2dfa:	89 5d       	subi	r24, 0xD9	; 217
    2dfc:	81 93       	st	Z+, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	a1 f7       	brne	.-24     	; 0x2dec <itoa+0x1c>
    2e04:	16 f4       	brtc	.+4      	; 0x2e0a <itoa+0x3a>
    2e06:	5d e2       	ldi	r21, 0x2D	; 45
    2e08:	51 93       	st	Z+, r21
    2e0a:	10 82       	st	Z, r1
    2e0c:	c9 01       	movw	r24, r18
    2e0e:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <strrev>

00002e12 <strrev>:
    2e12:	dc 01       	movw	r26, r24
    2e14:	fc 01       	movw	r30, r24
    2e16:	67 2f       	mov	r22, r23
    2e18:	71 91       	ld	r23, Z+
    2e1a:	77 23       	and	r23, r23
    2e1c:	e1 f7       	brne	.-8      	; 0x2e16 <strrev+0x4>
    2e1e:	32 97       	sbiw	r30, 0x02	; 2
    2e20:	04 c0       	rjmp	.+8      	; 0x2e2a <strrev+0x18>
    2e22:	7c 91       	ld	r23, X
    2e24:	6d 93       	st	X+, r22
    2e26:	70 83       	st	Z, r23
    2e28:	62 91       	ld	r22, -Z
    2e2a:	ae 17       	cp	r26, r30
    2e2c:	bf 07       	cpc	r27, r31
    2e2e:	c8 f3       	brcs	.-14     	; 0x2e22 <strrev+0x10>
    2e30:	08 95       	ret

00002e32 <__udivmodhi4>:
    2e32:	aa 1b       	sub	r26, r26
    2e34:	bb 1b       	sub	r27, r27
    2e36:	51 e1       	ldi	r21, 0x11	; 17
    2e38:	07 c0       	rjmp	.+14     	; 0x2e48 <__udivmodhi4_ep>

00002e3a <__udivmodhi4_loop>:
    2e3a:	aa 1f       	adc	r26, r26
    2e3c:	bb 1f       	adc	r27, r27
    2e3e:	a6 17       	cp	r26, r22
    2e40:	b7 07       	cpc	r27, r23
    2e42:	10 f0       	brcs	.+4      	; 0x2e48 <__udivmodhi4_ep>
    2e44:	a6 1b       	sub	r26, r22
    2e46:	b7 0b       	sbc	r27, r23

00002e48 <__udivmodhi4_ep>:
    2e48:	88 1f       	adc	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	5a 95       	dec	r21
    2e4e:	a9 f7       	brne	.-22     	; 0x2e3a <__udivmodhi4_loop>
    2e50:	80 95       	com	r24
    2e52:	90 95       	com	r25
    2e54:	bc 01       	movw	r22, r24
    2e56:	cd 01       	movw	r24, r26
    2e58:	08 95       	ret

00002e5a <_exit>:
    2e5a:	f8 94       	cli

00002e5c <__stop_program>:
    2e5c:	ff cf       	rjmp	.-2      	; 0x2e5c <__stop_program>
